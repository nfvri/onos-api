// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package onos.ransim.types;

import "gogoproto/gogo.proto";

message Coordinate {
    double lat = 1;
    double lng = 2;
}


message Carrier {
    repeated Beam  beams = 1;
    Coordinate center = 2;
    int32 height = 3;
    uint32 arfcn_dl = 4;
    uint32 arfcn_ul = 5;
    uint32 bs_channel_bw_dl = 6;
    uint32 bs_channel_bw_ul = 7;
    double tx_power_db = 8 [(gogoproto.customname) = "TxPowerdB"];
    double v_side_lobe_attenuation_db = 9;
    string environment = 10;
    bool los = 11;
}

message Route {
    uint64 name = 1 [(gogoproto.customname) = "RouteID", (gogoproto.casttype) = "IMSI"];

    repeated Coordinate waypoints = 2;

    string color = 3;

    uint32 speed_avg = 4;

    uint32 speed_stdev = 5;

    bool reverse = 6;

    uint32 next_point = 7;
}

message Ue {
    uint64 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "IMSI"];
    UeIdentity ueid = 2;
    string type = 3;
    uint32 rrc_state = 4;
    Coordinate location = 5;
    uint32 heading = 6;
    int32 five_qi = 7;
    repeated UECell serving_cells = 8;
    uint32 crnti = 9 [(gogoproto.customname) = "CRNTI", (gogoproto.casttype) = "CRNTI"];
    repeated UECell neighbor_cells = 10;
    double height = 11;
    bool is_admitted = 12;
}

message UECell {
    uint64 id = 1 [(gogoproto.customname) = "GnbID", (gogoproto.casttype) = "GnbID"];
    uint64 ncgi = 2 [(gogoproto.casttype) = "NCGI"];
    BeamID beam_id = 3;
    double rsrp = 4;
    double rsrq = 5;
    double sinr = 6;
    repeated Bwp bwp_refs = 7;
    uint32 avail_prbs_dl = 8;
}

message UeIdentity {
    Guami guami = 1;
    uint64 amf_ue_ngap_id = 2 [(gogoproto.casttype) = "AmfUENgapID"];
}

message Guami {
    uint32 plmnid = 1; // 24 bits (12 bits for MCC and 12 bits for MNC)
    uint32 amf_region_id = 2; // 8 bits
    uint32 amf_set_id = 3; // 10 bits
    uint32 amf_pointer = 4; // 6 bits
}

message UeMetrics {
    // Latency (in nanoseconds) of the most recent hand-over
    int64 ho_latency = 1;

    // Handover report timestamp (in nanoseconds since epoch)
    int64 ho_report_timestamp = 2;

    // flag to indicate the first measurement
    bool is_first = 3;
}

enum CellType {
    FEMTO = 0;
    ENTERPRISE = 1;
    OUTDOOR_SMALL = 2;
    MACRO = 3;
}

message InterferingBeamsEntry {
    BeamID beam_id = 1;
    repeated BeamID interfering_beams = 2;
}

message Cell {
    CellConfig cell_config = 1;
    uint64 ncgi = 2 [(gogoproto.customname) = "NCGI", (gogoproto.casttype) = "NCGI"];
    string color = 3;
    uint32 max_ues = 4 [(gogoproto.customname) = "MaxUEs"];
    repeated uint64 neighbors = 5 [(gogoproto.casttype) = "NCGI"];
    MeasurementParams measurement_params = 6;
    uint32 pci = 7;
    uint32 earfcn = 8;
    CellType cell_type = 9;
    uint32 arfcn_dl = 10;
    uint32 arfcn_ul = 11;
    uint32 bs_channel_bw_dl = 12;
    uint32 bs_channel_bw_ul = 13;
    map<uint64, Bwp> bwps = 14;
    uint32 rrc_idle_count = 15;
    uint32 rrc_connected_count = 16;
    bool cached = 17;
    map<string, CellCoverageInfo> cached_states = 18;
    string current_state_hash = 19;
    string resource_alloc_scheme = 20;
    repeated InterferingBeamsEntry beam_interference_mapping = 21;
    Grid grid = 22;
}


message CellConfig {
    repeated Carrier carriers = 1;
}



message Channel {
    uint32 ssb_frequency = 1;
    uint32 arfcn_dl = 2;
    uint32 arfcn_ul = 3;
    string environment = 4;
    uint32 bs_channel_bw_dl = 5;
    uint32 bs_channel_bw_ul = 6;
    uint32 bs_channel_bw_sul = 7;
    bool los = 8;
}

message BeamID {
    uint64 ncgi = 1 [(gogoproto.casttype) = "NCGI"];
    int32 carrier_index = 2;
    int32 beam_index = 3;
}

message Beam {
    int32 beam_index = 1;
    double azimuth = 2;
    double tilt = 3;
    double h3db_angle = 4;
    double v3db_angle = 5;
    double max_gain = 6;
}

message MeasurementParams {
    int32 time_to_trigger = 1;

    int32 frequency_offset = 2;

    int32 pcell_individual_offset = 3;

    map<uint64, int32> ncell_individual_offsets = 4 [(gogoproto.castkey)="NCGI"];

    int32 hysteresis = 5;

    EventA3Params event_a3_params = 6;
}

message EventA3Params {
    int32 a3_offset = 1;

    bool report_on_leave = 2;
}

message Bwp {
    uint64 id = 1;
    int32 scs = 2;
    int32 number_of_rbs = 3;
    bool downlink = 4;
}


message BeamCoverageEntry {
    BeamID beam_id = 1;
    repeated CoverageBoundary coverage_boundaries = 2;
}

message CellCoverageInfo {
    repeated BeamCoverageEntry rp_coverage_boundaries = 1;
    repeated BeamCoverageEntry coverage_boundaries = 2;
}

message CoverageBoundary {
    double ref_signal_strength = 1;
    repeated Coordinate boundary_points = 2;
}


message ShadowingMapEntry {
    BeamID beam_id = 1;
    repeated double shadowing_map = 2;
}

message GridPointsEntry {
    BeamID beam_id = 1;
    repeated Coordinate grid_points = 2;
}

message BoundingBoxEntry {
    BeamID beam_id = 1;
    BoundingBox bounding_box = 2;
}

message Grid {
    repeated ShadowingMapEntry shadowing_maps = 1;
    repeated GridPointsEntry grid_points_maps = 2;
    repeated BoundingBoxEntry bounding_boxes = 3;
}

message BoundingBox {
    double min_lat = 1;
    double min_lng = 2;
    double max_lat = 3;
    double max_lng = 4;
}

message Node {
    uint32 enbid = 1 [(gogoproto.customname) = "GnbID", (gogoproto.casttype) = "GnbID"];

    repeated string controllers = 2;

    repeated string service_models = 3;

    repeated uint64 cell_ecgis = 4 [(gogoproto.customname) = "CellNCGIs", (gogoproto.casttype) = "NCGI"];

    string status = 5;
}

message MapLayout {
    // Map center latitude and longitude
    Coordinate center = 1;

    // The starting Zoom level
    float zoom = 2;

    // Show map as faded on start
    bool fade = 3;

    // Show routes on start
    bool show_routes = 4;

    // Show power as circle on start
    bool show_power = 5;

    // Ratio of random locations diameter to tower grid width
    float locations_scale = 9;

    // FIXME: These are deprecated; remove
    // Max number of UEs for complete simulation
    uint32 min_ues = 6;

    // Max number of UEs for complete simulation
    uint32 max_ues = 7;

    // the current number of routes
    uint32 current_routes = 8;

}

