// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/ransim/types/types.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CellType int32

const (
	CellType_FEMTO         CellType = 0
	CellType_ENTERPRISE    CellType = 1
	CellType_OUTDOOR_SMALL CellType = 2
	CellType_MACRO         CellType = 3
)

var CellType_name = map[int32]string{
	0: "FEMTO",
	1: "ENTERPRISE",
	2: "OUTDOOR_SMALL",
	3: "MACRO",
}

var CellType_value = map[string]int32{
	"FEMTO":         0,
	"ENTERPRISE":    1,
	"OUTDOOR_SMALL": 2,
	"MACRO":         3,
}

func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}

func (CellType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{0}
}

type Coordinate struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Coordinate) Reset()         { *m = Coordinate{} }
func (m *Coordinate) String() string { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()    {}
func (*Coordinate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{0}
}
func (m *Coordinate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coordinate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coordinate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coordinate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coordinate.Merge(m, src)
}
func (m *Coordinate) XXX_Size() int {
	return m.Size()
}
func (m *Coordinate) XXX_DiscardUnknown() {
	xxx_messageInfo_Coordinate.DiscardUnknown(m)
}

var xxx_messageInfo_Coordinate proto.InternalMessageInfo

func (m *Coordinate) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Coordinate) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Sector struct {
	Center  *Coordinate `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Azimuth float64     `protobuf:"fixed64,2,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Arc     int32       `protobuf:"varint,3,opt,name=arc,proto3" json:"arc,omitempty"`
	Tilt    float64     `protobuf:"fixed64,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
	Height  int32       `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Sector) Reset()         { *m = Sector{} }
func (m *Sector) String() string { return proto.CompactTextString(m) }
func (*Sector) ProtoMessage()    {}
func (*Sector) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{1}
}
func (m *Sector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sector.Merge(m, src)
}
func (m *Sector) XXX_Size() int {
	return m.Size()
}
func (m *Sector) XXX_DiscardUnknown() {
	xxx_messageInfo_Sector.DiscardUnknown(m)
}

var xxx_messageInfo_Sector proto.InternalMessageInfo

func (m *Sector) GetCenter() *Coordinate {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *Sector) GetAzimuth() float64 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Sector) GetArc() int32 {
	if m != nil {
		return m.Arc
	}
	return 0
}

func (m *Sector) GetTilt() float64 {
	if m != nil {
		return m.Tilt
	}
	return 0
}

func (m *Sector) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Route struct {
	RouteID    IMSI          `protobuf:"varint,1,opt,name=name,proto3,casttype=IMSI" json:"name,omitempty"`
	Waypoints  []*Coordinate `protobuf:"bytes,2,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	Color      string        `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	SpeedAvg   uint32        `protobuf:"varint,4,opt,name=speed_avg,json=speedAvg,proto3" json:"speed_avg,omitempty"`
	SpeedStdev uint32        `protobuf:"varint,5,opt,name=speed_stdev,json=speedStdev,proto3" json:"speed_stdev,omitempty"`
	Reverse    bool          `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	NextPoint  uint32        `protobuf:"varint,7,opt,name=next_point,json=nextPoint,proto3" json:"next_point,omitempty"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetRouteID() IMSI {
	if m != nil {
		return m.RouteID
	}
	return 0
}

func (m *Route) GetWaypoints() []*Coordinate {
	if m != nil {
		return m.Waypoints
	}
	return nil
}

func (m *Route) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Route) GetSpeedAvg() uint32 {
	if m != nil {
		return m.SpeedAvg
	}
	return 0
}

func (m *Route) GetSpeedStdev() uint32 {
	if m != nil {
		return m.SpeedStdev
	}
	return 0
}

func (m *Route) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *Route) GetNextPoint() uint32 {
	if m != nil {
		return m.NextPoint
	}
	return 0
}

type Ue struct {
	IMSI       IMSI        `protobuf:"varint,1,opt,name=imsi,proto3,casttype=IMSI" json:"imsi,omitempty"`
	Ueid       *UeIdentity `protobuf:"bytes,2,opt,name=ueid,proto3" json:"ueid,omitempty"`
	Type       string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	RrcState   uint32      `protobuf:"varint,4,opt,name=rrc_state,json=rrcState,proto3" json:"rrc_state,omitempty"`
	Location   *Coordinate `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Heading    uint32      `protobuf:"varint,6,opt,name=heading,proto3" json:"heading,omitempty"`
	FiveQi     int32       `protobuf:"varint,7,opt,name=five_qi,json=fiveQi,proto3" json:"five_qi,omitempty"`
	Cell       *UECell     `protobuf:"bytes,8,opt,name=cell,proto3" json:"cell,omitempty"`
	CRNTI      CRNTI       `protobuf:"varint,9,opt,name=crnti,proto3,casttype=CRNTI" json:"crnti,omitempty"`
	Cells      []*UECell   `protobuf:"bytes,10,rep,name=cells,proto3" json:"cells,omitempty"`
	Height     float64     `protobuf:"fixed64,11,opt,name=height,proto3" json:"height,omitempty"`
	IsAdmitted bool        `protobuf:"varint,12,opt,name=is_admitted,json=isAdmitted,proto3" json:"is_admitted,omitempty"`
}

func (m *Ue) Reset()         { *m = Ue{} }
func (m *Ue) String() string { return proto.CompactTextString(m) }
func (*Ue) ProtoMessage()    {}
func (*Ue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{3}
}
func (m *Ue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ue.Merge(m, src)
}
func (m *Ue) XXX_Size() int {
	return m.Size()
}
func (m *Ue) XXX_DiscardUnknown() {
	xxx_messageInfo_Ue.DiscardUnknown(m)
}

var xxx_messageInfo_Ue proto.InternalMessageInfo

func (m *Ue) GetIMSI() IMSI {
	if m != nil {
		return m.IMSI
	}
	return 0
}

func (m *Ue) GetUeid() *UeIdentity {
	if m != nil {
		return m.Ueid
	}
	return nil
}

func (m *Ue) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Ue) GetRrcState() uint32 {
	if m != nil {
		return m.RrcState
	}
	return 0
}

func (m *Ue) GetLocation() *Coordinate {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Ue) GetHeading() uint32 {
	if m != nil {
		return m.Heading
	}
	return 0
}

func (m *Ue) GetFiveQi() int32 {
	if m != nil {
		return m.FiveQi
	}
	return 0
}

func (m *Ue) GetCell() *UECell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *Ue) GetCRNTI() CRNTI {
	if m != nil {
		return m.CRNTI
	}
	return 0
}

func (m *Ue) GetCells() []*UECell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *Ue) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Ue) GetIsAdmitted() bool {
	if m != nil {
		return m.IsAdmitted
	}
	return false
}

type UECell struct {
	GnbID       GnbID   `protobuf:"varint,1,opt,name=id,proto3,casttype=GnbID" json:"id,omitempty"`
	Ncgi        NCGI    `protobuf:"varint,2,opt,name=ncgi,proto3,casttype=NCGI" json:"ncgi,omitempty"`
	Rsrp        float64 `protobuf:"fixed64,3,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	Rsrq        float64 `protobuf:"fixed64,4,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
	Sinr        float64 `protobuf:"fixed64,5,opt,name=sinr,proto3" json:"sinr,omitempty"`
	BwpRefs     []*Bwp  `protobuf:"bytes,6,rep,name=bwp_refs,json=bwpRefs,proto3" json:"bwp_refs,omitempty"`
	AvailPrbsDl uint32  `protobuf:"varint,7,opt,name=avail_prbs_dl,json=availPrbsDl,proto3" json:"avail_prbs_dl,omitempty"`
}

func (m *UECell) Reset()         { *m = UECell{} }
func (m *UECell) String() string { return proto.CompactTextString(m) }
func (*UECell) ProtoMessage()    {}
func (*UECell) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{4}
}
func (m *UECell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UECell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UECell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UECell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UECell.Merge(m, src)
}
func (m *UECell) XXX_Size() int {
	return m.Size()
}
func (m *UECell) XXX_DiscardUnknown() {
	xxx_messageInfo_UECell.DiscardUnknown(m)
}

var xxx_messageInfo_UECell proto.InternalMessageInfo

func (m *UECell) GetGnbID() GnbID {
	if m != nil {
		return m.GnbID
	}
	return 0
}

func (m *UECell) GetNcgi() NCGI {
	if m != nil {
		return m.Ncgi
	}
	return 0
}

func (m *UECell) GetRsrp() float64 {
	if m != nil {
		return m.Rsrp
	}
	return 0
}

func (m *UECell) GetRsrq() float64 {
	if m != nil {
		return m.Rsrq
	}
	return 0
}

func (m *UECell) GetSinr() float64 {
	if m != nil {
		return m.Sinr
	}
	return 0
}

func (m *UECell) GetBwpRefs() []*Bwp {
	if m != nil {
		return m.BwpRefs
	}
	return nil
}

func (m *UECell) GetAvailPrbsDl() uint32 {
	if m != nil {
		return m.AvailPrbsDl
	}
	return 0
}

type UeIdentity struct {
	Guami       *Guami      `protobuf:"bytes,1,opt,name=guami,proto3" json:"guami,omitempty"`
	AmfUeNgapId AmfUENgapID `protobuf:"varint,2,opt,name=amf_ue_ngap_id,json=amfUeNgapId,proto3,casttype=AmfUENgapID" json:"amf_ue_ngap_id,omitempty"`
}

func (m *UeIdentity) Reset()         { *m = UeIdentity{} }
func (m *UeIdentity) String() string { return proto.CompactTextString(m) }
func (*UeIdentity) ProtoMessage()    {}
func (*UeIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{5}
}
func (m *UeIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeIdentity.Merge(m, src)
}
func (m *UeIdentity) XXX_Size() int {
	return m.Size()
}
func (m *UeIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_UeIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_UeIdentity proto.InternalMessageInfo

func (m *UeIdentity) GetGuami() *Guami {
	if m != nil {
		return m.Guami
	}
	return nil
}

func (m *UeIdentity) GetAmfUeNgapId() AmfUENgapID {
	if m != nil {
		return m.AmfUeNgapId
	}
	return 0
}

type Guami struct {
	Plmnid      uint32 `protobuf:"varint,1,opt,name=plmnid,proto3" json:"plmnid,omitempty"`
	AmfRegionId uint32 `protobuf:"varint,2,opt,name=amf_region_id,json=amfRegionId,proto3" json:"amf_region_id,omitempty"`
	AmfSetId    uint32 `protobuf:"varint,3,opt,name=amf_set_id,json=amfSetId,proto3" json:"amf_set_id,omitempty"`
	AmfPointer  uint32 `protobuf:"varint,4,opt,name=amf_pointer,json=amfPointer,proto3" json:"amf_pointer,omitempty"`
}

func (m *Guami) Reset()         { *m = Guami{} }
func (m *Guami) String() string { return proto.CompactTextString(m) }
func (*Guami) ProtoMessage()    {}
func (*Guami) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{6}
}
func (m *Guami) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guami) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guami.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guami) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guami.Merge(m, src)
}
func (m *Guami) XXX_Size() int {
	return m.Size()
}
func (m *Guami) XXX_DiscardUnknown() {
	xxx_messageInfo_Guami.DiscardUnknown(m)
}

var xxx_messageInfo_Guami proto.InternalMessageInfo

func (m *Guami) GetPlmnid() uint32 {
	if m != nil {
		return m.Plmnid
	}
	return 0
}

func (m *Guami) GetAmfRegionId() uint32 {
	if m != nil {
		return m.AmfRegionId
	}
	return 0
}

func (m *Guami) GetAmfSetId() uint32 {
	if m != nil {
		return m.AmfSetId
	}
	return 0
}

func (m *Guami) GetAmfPointer() uint32 {
	if m != nil {
		return m.AmfPointer
	}
	return 0
}

type UeMetrics struct {
	// Latency (in nanoseconds) of the most recent hand-over
	HoLatency int64 `protobuf:"varint,1,opt,name=ho_latency,json=hoLatency,proto3" json:"ho_latency,omitempty"`
	// Handover report timestamp (in nanoseconds since epoch)
	HoReportTimestamp int64 `protobuf:"varint,2,opt,name=ho_report_timestamp,json=hoReportTimestamp,proto3" json:"ho_report_timestamp,omitempty"`
	// flag to indicate the first measurement
	IsFirst bool `protobuf:"varint,3,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
}

func (m *UeMetrics) Reset()         { *m = UeMetrics{} }
func (m *UeMetrics) String() string { return proto.CompactTextString(m) }
func (*UeMetrics) ProtoMessage()    {}
func (*UeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{7}
}
func (m *UeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeMetrics.Merge(m, src)
}
func (m *UeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *UeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_UeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_UeMetrics proto.InternalMessageInfo

func (m *UeMetrics) GetHoLatency() int64 {
	if m != nil {
		return m.HoLatency
	}
	return 0
}

func (m *UeMetrics) GetHoReportTimestamp() int64 {
	if m != nil {
		return m.HoReportTimestamp
	}
	return 0
}

func (m *UeMetrics) GetIsFirst() bool {
	if m != nil {
		return m.IsFirst
	}
	return false
}

type Cell struct {
	CellConfig          *CellConfig                `protobuf:"bytes,1,opt,name=cell_config,json=cellConfig,proto3" json:"cell_config,omitempty"`
	NCGI                NCGI                       `protobuf:"varint,2,opt,name=ncgi,proto3,casttype=NCGI" json:"ncgi,omitempty"`
	Color               string                     `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	MaxUEs              uint32                     `protobuf:"varint,4,opt,name=max_ues,json=maxUes,proto3" json:"max_ues,omitempty"`
	Neighbors           []NCGI                     `protobuf:"varint,5,rep,packed,name=neighbors,proto3,casttype=NCGI" json:"neighbors,omitempty"`
	MeasurementParams   *MeasurementParams         `protobuf:"bytes,6,opt,name=measurement_params,json=measurementParams,proto3" json:"measurement_params,omitempty"`
	Pci                 uint32                     `protobuf:"varint,7,opt,name=pci,proto3" json:"pci,omitempty"`
	Earfcn              uint32                     `protobuf:"varint,8,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	CellType            CellType                   `protobuf:"varint,9,opt,name=cell_type,json=cellType,proto3,enum=onos.ransim.types.CellType" json:"cell_type,omitempty"`
	Bwps                map[uint64]*Bwp            `protobuf:"bytes,10,rep,name=bwps,proto3" json:"bwps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RrcIdleCount        uint32                     `protobuf:"varint,11,opt,name=rrc_idle_count,json=rrcIdleCount,proto3" json:"rrc_idle_count,omitempty"`
	RrcConnectedCount   uint32                     `protobuf:"varint,12,opt,name=rrc_connected_count,json=rrcConnectedCount,proto3" json:"rrc_connected_count,omitempty"`
	Cached              bool                       `protobuf:"varint,13,opt,name=cached,proto3" json:"cached,omitempty"`
	CachedStates        map[string]*CellSignalInfo `protobuf:"bytes,14,rep,name=cached_states,json=cachedStates,proto3" json:"cached_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrentStateHash    string                     `protobuf:"bytes,15,opt,name=current_state_hash,json=currentStateHash,proto3" json:"current_state_hash,omitempty"`
	ResourceAllocScheme string                     `protobuf:"bytes,16,opt,name=resource_alloc_scheme,json=resourceAllocScheme,proto3" json:"resource_alloc_scheme,omitempty"`
	Grid                *Grid                      `protobuf:"bytes,17,opt,name=grid,proto3" json:"grid,omitempty"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{8}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetCellConfig() *CellConfig {
	if m != nil {
		return m.CellConfig
	}
	return nil
}

func (m *Cell) GetNCGI() NCGI {
	if m != nil {
		return m.NCGI
	}
	return 0
}

func (m *Cell) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Cell) GetMaxUEs() uint32 {
	if m != nil {
		return m.MaxUEs
	}
	return 0
}

func (m *Cell) GetNeighbors() []NCGI {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *Cell) GetMeasurementParams() *MeasurementParams {
	if m != nil {
		return m.MeasurementParams
	}
	return nil
}

func (m *Cell) GetPci() uint32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *Cell) GetEarfcn() uint32 {
	if m != nil {
		return m.Earfcn
	}
	return 0
}

func (m *Cell) GetCellType() CellType {
	if m != nil {
		return m.CellType
	}
	return CellType_FEMTO
}

func (m *Cell) GetBwps() map[uint64]*Bwp {
	if m != nil {
		return m.Bwps
	}
	return nil
}

func (m *Cell) GetRrcIdleCount() uint32 {
	if m != nil {
		return m.RrcIdleCount
	}
	return 0
}

func (m *Cell) GetRrcConnectedCount() uint32 {
	if m != nil {
		return m.RrcConnectedCount
	}
	return 0
}

func (m *Cell) GetCached() bool {
	if m != nil {
		return m.Cached
	}
	return false
}

func (m *Cell) GetCachedStates() map[string]*CellSignalInfo {
	if m != nil {
		return m.CachedStates
	}
	return nil
}

func (m *Cell) GetCurrentStateHash() string {
	if m != nil {
		return m.CurrentStateHash
	}
	return ""
}

func (m *Cell) GetResourceAllocScheme() string {
	if m != nil {
		return m.ResourceAllocScheme
	}
	return ""
}

func (m *Cell) GetGrid() *Grid {
	if m != nil {
		return m.Grid
	}
	return nil
}

type CellConfig struct {
	TxPowerdB float64  `protobuf:"fixed64,1,opt,name=tx_power_db,json=txPowerDb,proto3" json:"tx_power_db,omitempty"`
	Sector    *Sector  `protobuf:"bytes,2,opt,name=sector,proto3" json:"sector,omitempty"`
	Channel   *Channel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Beam      *Beam    `protobuf:"bytes,4,opt,name=beam,proto3" json:"beam,omitempty"`
}

func (m *CellConfig) Reset()         { *m = CellConfig{} }
func (m *CellConfig) String() string { return proto.CompactTextString(m) }
func (*CellConfig) ProtoMessage()    {}
func (*CellConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{9}
}
func (m *CellConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellConfig.Merge(m, src)
}
func (m *CellConfig) XXX_Size() int {
	return m.Size()
}
func (m *CellConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CellConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CellConfig proto.InternalMessageInfo

func (m *CellConfig) GetTxPowerdB() float64 {
	if m != nil {
		return m.TxPowerdB
	}
	return 0
}

func (m *CellConfig) GetSector() *Sector {
	if m != nil {
		return m.Sector
	}
	return nil
}

func (m *CellConfig) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *CellConfig) GetBeam() *Beam {
	if m != nil {
		return m.Beam
	}
	return nil
}

type Channel struct {
	SsbFrequency   uint32 `protobuf:"varint,1,opt,name=ssb_frequency,json=ssbFrequency,proto3" json:"ssb_frequency,omitempty"`
	ArfcnDl        uint32 `protobuf:"varint,2,opt,name=arfcn_dl,json=arfcnDl,proto3" json:"arfcn_dl,omitempty"`
	ArfcnUl        uint32 `protobuf:"varint,3,opt,name=arfcn_ul,json=arfcnUl,proto3" json:"arfcn_ul,omitempty"`
	Environment    string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	BsChannelBwDl  uint32 `protobuf:"varint,5,opt,name=bs_channel_bw_dl,json=bsChannelBwDl,proto3" json:"bs_channel_bw_dl,omitempty"`
	BsChannelBwUl  uint32 `protobuf:"varint,6,opt,name=bs_channel_bw_ul,json=bsChannelBwUl,proto3" json:"bs_channel_bw_ul,omitempty"`
	BsChannelBwSul uint32 `protobuf:"varint,7,opt,name=bs_channel_bw_sul,json=bsChannelBwSul,proto3" json:"bs_channel_bw_sul,omitempty"`
	Los            bool   `protobuf:"varint,8,opt,name=los,proto3" json:"los,omitempty"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{10}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetSsbFrequency() uint32 {
	if m != nil {
		return m.SsbFrequency
	}
	return 0
}

func (m *Channel) GetArfcnDl() uint32 {
	if m != nil {
		return m.ArfcnDl
	}
	return 0
}

func (m *Channel) GetArfcnUl() uint32 {
	if m != nil {
		return m.ArfcnUl
	}
	return 0
}

func (m *Channel) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Channel) GetBsChannelBwDl() uint32 {
	if m != nil {
		return m.BsChannelBwDl
	}
	return 0
}

func (m *Channel) GetBsChannelBwUl() uint32 {
	if m != nil {
		return m.BsChannelBwUl
	}
	return 0
}

func (m *Channel) GetBsChannelBwSul() uint32 {
	if m != nil {
		return m.BsChannelBwSul
	}
	return 0
}

func (m *Channel) GetLos() bool {
	if m != nil {
		return m.Los
	}
	return false
}

type Beam struct {
	H3DbAngle              float64 `protobuf:"fixed64,1,opt,name=h3db_angle,json=h3dbAngle,proto3" json:"h3db_angle,omitempty"`
	V3DbAngle              float64 `protobuf:"fixed64,2,opt,name=v3db_angle,json=v3dbAngle,proto3" json:"v3db_angle,omitempty"`
	MaxGain                float64 `protobuf:"fixed64,3,opt,name=max_gain,json=maxGain,proto3" json:"max_gain,omitempty"`
	MaxAttenuationDb       float64 `protobuf:"fixed64,4,opt,name=max_attenuation_db,json=maxAttenuationDb,proto3" json:"max_attenuation_db,omitempty"`
	VSideLobeAttenuationDb float64 `protobuf:"fixed64,5,opt,name=v_side_lobe_attenuation_db,json=vSideLobeAttenuationDb,proto3" json:"v_side_lobe_attenuation_db,omitempty"`
}

func (m *Beam) Reset()         { *m = Beam{} }
func (m *Beam) String() string { return proto.CompactTextString(m) }
func (*Beam) ProtoMessage()    {}
func (*Beam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{11}
}
func (m *Beam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Beam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Beam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Beam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Beam.Merge(m, src)
}
func (m *Beam) XXX_Size() int {
	return m.Size()
}
func (m *Beam) XXX_DiscardUnknown() {
	xxx_messageInfo_Beam.DiscardUnknown(m)
}

var xxx_messageInfo_Beam proto.InternalMessageInfo

func (m *Beam) GetH3DbAngle() float64 {
	if m != nil {
		return m.H3DbAngle
	}
	return 0
}

func (m *Beam) GetV3DbAngle() float64 {
	if m != nil {
		return m.V3DbAngle
	}
	return 0
}

func (m *Beam) GetMaxGain() float64 {
	if m != nil {
		return m.MaxGain
	}
	return 0
}

func (m *Beam) GetMaxAttenuationDb() float64 {
	if m != nil {
		return m.MaxAttenuationDb
	}
	return 0
}

func (m *Beam) GetVSideLobeAttenuationDb() float64 {
	if m != nil {
		return m.VSideLobeAttenuationDb
	}
	return 0
}

type MeasurementParams struct {
	TimeToTrigger          int32          `protobuf:"varint,1,opt,name=time_to_trigger,json=timeToTrigger,proto3" json:"time_to_trigger,omitempty"`
	FrequencyOffset        int32          `protobuf:"varint,2,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
	PcellIndividualOffset  int32          `protobuf:"varint,3,opt,name=pcell_individual_offset,json=pcellIndividualOffset,proto3" json:"pcell_individual_offset,omitempty"`
	NcellIndividualOffsets map[NCGI]int32 `protobuf:"bytes,4,rep,name=ncell_individual_offsets,json=ncellIndividualOffsets,proto3,castkey=NCGI" json:"ncell_individual_offsets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Hysteresis             int32          `protobuf:"varint,5,opt,name=hysteresis,proto3" json:"hysteresis,omitempty"`
	EventA3Params          *EventA3Params `protobuf:"bytes,6,opt,name=event_a3_params,json=eventA3Params,proto3" json:"event_a3_params,omitempty"`
}

func (m *MeasurementParams) Reset()         { *m = MeasurementParams{} }
func (m *MeasurementParams) String() string { return proto.CompactTextString(m) }
func (*MeasurementParams) ProtoMessage()    {}
func (*MeasurementParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{12}
}
func (m *MeasurementParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeasurementParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeasurementParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeasurementParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeasurementParams.Merge(m, src)
}
func (m *MeasurementParams) XXX_Size() int {
	return m.Size()
}
func (m *MeasurementParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MeasurementParams.DiscardUnknown(m)
}

var xxx_messageInfo_MeasurementParams proto.InternalMessageInfo

func (m *MeasurementParams) GetTimeToTrigger() int32 {
	if m != nil {
		return m.TimeToTrigger
	}
	return 0
}

func (m *MeasurementParams) GetFrequencyOffset() int32 {
	if m != nil {
		return m.FrequencyOffset
	}
	return 0
}

func (m *MeasurementParams) GetPcellIndividualOffset() int32 {
	if m != nil {
		return m.PcellIndividualOffset
	}
	return 0
}

func (m *MeasurementParams) GetNcellIndividualOffsets() map[NCGI]int32 {
	if m != nil {
		return m.NcellIndividualOffsets
	}
	return nil
}

func (m *MeasurementParams) GetHysteresis() int32 {
	if m != nil {
		return m.Hysteresis
	}
	return 0
}

func (m *MeasurementParams) GetEventA3Params() *EventA3Params {
	if m != nil {
		return m.EventA3Params
	}
	return nil
}

type EventA3Params struct {
	A3Offset      int32 `protobuf:"varint,1,opt,name=a3_offset,json=a3Offset,proto3" json:"a3_offset,omitempty"`
	ReportOnLeave bool  `protobuf:"varint,2,opt,name=report_on_leave,json=reportOnLeave,proto3" json:"report_on_leave,omitempty"`
}

func (m *EventA3Params) Reset()         { *m = EventA3Params{} }
func (m *EventA3Params) String() string { return proto.CompactTextString(m) }
func (*EventA3Params) ProtoMessage()    {}
func (*EventA3Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{13}
}
func (m *EventA3Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventA3Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventA3Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventA3Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventA3Params.Merge(m, src)
}
func (m *EventA3Params) XXX_Size() int {
	return m.Size()
}
func (m *EventA3Params) XXX_DiscardUnknown() {
	xxx_messageInfo_EventA3Params.DiscardUnknown(m)
}

var xxx_messageInfo_EventA3Params proto.InternalMessageInfo

func (m *EventA3Params) GetA3Offset() int32 {
	if m != nil {
		return m.A3Offset
	}
	return 0
}

func (m *EventA3Params) GetReportOnLeave() bool {
	if m != nil {
		return m.ReportOnLeave
	}
	return false
}

type Bwp struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scs         int32  `protobuf:"varint,2,opt,name=scs,proto3" json:"scs,omitempty"`
	NumberOfRbs int32  `protobuf:"varint,3,opt,name=number_of_rbs,json=numberOfRbs,proto3" json:"number_of_rbs,omitempty"`
	Downlink    bool   `protobuf:"varint,4,opt,name=downlink,proto3" json:"downlink,omitempty"`
}

func (m *Bwp) Reset()         { *m = Bwp{} }
func (m *Bwp) String() string { return proto.CompactTextString(m) }
func (*Bwp) ProtoMessage()    {}
func (*Bwp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{14}
}
func (m *Bwp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bwp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bwp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bwp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bwp.Merge(m, src)
}
func (m *Bwp) XXX_Size() int {
	return m.Size()
}
func (m *Bwp) XXX_DiscardUnknown() {
	xxx_messageInfo_Bwp.DiscardUnknown(m)
}

var xxx_messageInfo_Bwp proto.InternalMessageInfo

func (m *Bwp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bwp) GetScs() int32 {
	if m != nil {
		return m.Scs
	}
	return 0
}

func (m *Bwp) GetNumberOfRbs() int32 {
	if m != nil {
		return m.NumberOfRbs
	}
	return 0
}

func (m *Bwp) GetDownlink() bool {
	if m != nil {
		return m.Downlink
	}
	return false
}

type CellSignalInfo struct {
	RpCoverageBoundaries []*CoverageBoundary `protobuf:"bytes,1,rep,name=rp_coverage_boundaries,json=rpCoverageBoundaries,proto3" json:"rp_coverage_boundaries,omitempty"`
	CoverageBoundaries   []*CoverageBoundary `protobuf:"bytes,2,rep,name=coverage_boundaries,json=coverageBoundaries,proto3" json:"coverage_boundaries,omitempty"`
}

func (m *CellSignalInfo) Reset()         { *m = CellSignalInfo{} }
func (m *CellSignalInfo) String() string { return proto.CompactTextString(m) }
func (*CellSignalInfo) ProtoMessage()    {}
func (*CellSignalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{15}
}
func (m *CellSignalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellSignalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellSignalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellSignalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellSignalInfo.Merge(m, src)
}
func (m *CellSignalInfo) XXX_Size() int {
	return m.Size()
}
func (m *CellSignalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CellSignalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CellSignalInfo proto.InternalMessageInfo

func (m *CellSignalInfo) GetRpCoverageBoundaries() []*CoverageBoundary {
	if m != nil {
		return m.RpCoverageBoundaries
	}
	return nil
}

func (m *CellSignalInfo) GetCoverageBoundaries() []*CoverageBoundary {
	if m != nil {
		return m.CoverageBoundaries
	}
	return nil
}

type CoverageBoundary struct {
	RefSignalStrength float64       `protobuf:"fixed64,1,opt,name=ref_signal_strength,json=refSignalStrength,proto3" json:"ref_signal_strength,omitempty"`
	BoundaryPoints    []*Coordinate `protobuf:"bytes,2,rep,name=boundary_points,json=boundaryPoints,proto3" json:"boundary_points,omitempty"`
}

func (m *CoverageBoundary) Reset()         { *m = CoverageBoundary{} }
func (m *CoverageBoundary) String() string { return proto.CompactTextString(m) }
func (*CoverageBoundary) ProtoMessage()    {}
func (*CoverageBoundary) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{16}
}
func (m *CoverageBoundary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoverageBoundary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoverageBoundary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoverageBoundary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoverageBoundary.Merge(m, src)
}
func (m *CoverageBoundary) XXX_Size() int {
	return m.Size()
}
func (m *CoverageBoundary) XXX_DiscardUnknown() {
	xxx_messageInfo_CoverageBoundary.DiscardUnknown(m)
}

var xxx_messageInfo_CoverageBoundary proto.InternalMessageInfo

func (m *CoverageBoundary) GetRefSignalStrength() float64 {
	if m != nil {
		return m.RefSignalStrength
	}
	return 0
}

func (m *CoverageBoundary) GetBoundaryPoints() []*Coordinate {
	if m != nil {
		return m.BoundaryPoints
	}
	return nil
}

type Grid struct {
	ShadowingMap []float64     `protobuf:"fixed64,1,rep,packed,name=shadowing_map,json=shadowingMap,proto3" json:"shadowing_map,omitempty"`
	GridPoints   []*Coordinate `protobuf:"bytes,2,rep,name=grid_points,json=gridPoints,proto3" json:"grid_points,omitempty"`
	BoundingBox  *BoundingBox  `protobuf:"bytes,3,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
}

func (m *Grid) Reset()         { *m = Grid{} }
func (m *Grid) String() string { return proto.CompactTextString(m) }
func (*Grid) ProtoMessage()    {}
func (*Grid) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{17}
}
func (m *Grid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Grid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Grid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Grid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grid.Merge(m, src)
}
func (m *Grid) XXX_Size() int {
	return m.Size()
}
func (m *Grid) XXX_DiscardUnknown() {
	xxx_messageInfo_Grid.DiscardUnknown(m)
}

var xxx_messageInfo_Grid proto.InternalMessageInfo

func (m *Grid) GetShadowingMap() []float64 {
	if m != nil {
		return m.ShadowingMap
	}
	return nil
}

func (m *Grid) GetGridPoints() []*Coordinate {
	if m != nil {
		return m.GridPoints
	}
	return nil
}

func (m *Grid) GetBoundingBox() *BoundingBox {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

type BoundingBox struct {
	MinLat float64 `protobuf:"fixed64,1,opt,name=min_lat,json=minLat,proto3" json:"min_lat,omitempty"`
	MinLng float64 `protobuf:"fixed64,2,opt,name=min_lng,json=minLng,proto3" json:"min_lng,omitempty"`
	MaxLat float64 `protobuf:"fixed64,3,opt,name=max_lat,json=maxLat,proto3" json:"max_lat,omitempty"`
	MaxLng float64 `protobuf:"fixed64,4,opt,name=max_lng,json=maxLng,proto3" json:"max_lng,omitempty"`
}

func (m *BoundingBox) Reset()         { *m = BoundingBox{} }
func (m *BoundingBox) String() string { return proto.CompactTextString(m) }
func (*BoundingBox) ProtoMessage()    {}
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{18}
}
func (m *BoundingBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoundingBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoundingBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoundingBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingBox.Merge(m, src)
}
func (m *BoundingBox) XXX_Size() int {
	return m.Size()
}
func (m *BoundingBox) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingBox.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingBox proto.InternalMessageInfo

func (m *BoundingBox) GetMinLat() float64 {
	if m != nil {
		return m.MinLat
	}
	return 0
}

func (m *BoundingBox) GetMinLng() float64 {
	if m != nil {
		return m.MinLng
	}
	return 0
}

func (m *BoundingBox) GetMaxLat() float64 {
	if m != nil {
		return m.MaxLat
	}
	return 0
}

func (m *BoundingBox) GetMaxLng() float64 {
	if m != nil {
		return m.MaxLng
	}
	return 0
}

type Node struct {
	GnbID         GnbID    `protobuf:"varint,1,opt,name=enbid,proto3,casttype=GnbID" json:"enbid,omitempty"`
	Controllers   []string `protobuf:"bytes,2,rep,name=controllers,proto3" json:"controllers,omitempty"`
	ServiceModels []string `protobuf:"bytes,3,rep,name=service_models,json=serviceModels,proto3" json:"service_models,omitempty"`
	CellNCGIs     []NCGI   `protobuf:"varint,4,rep,packed,name=cell_ecgis,json=cellEcgis,proto3,casttype=NCGI" json:"cell_ecgis,omitempty"`
	Status        string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{19}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetGnbID() GnbID {
	if m != nil {
		return m.GnbID
	}
	return 0
}

func (m *Node) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *Node) GetServiceModels() []string {
	if m != nil {
		return m.ServiceModels
	}
	return nil
}

func (m *Node) GetCellNCGIs() []NCGI {
	if m != nil {
		return m.CellNCGIs
	}
	return nil
}

func (m *Node) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MapLayout struct {
	// Map center latitude and longitude
	Center *Coordinate `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	// The starting Zoom level
	Zoom float32 `protobuf:"fixed32,2,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Show map as faded on start
	Fade bool `protobuf:"varint,3,opt,name=fade,proto3" json:"fade,omitempty"`
	// Show routes on start
	ShowRoutes bool `protobuf:"varint,4,opt,name=show_routes,json=showRoutes,proto3" json:"show_routes,omitempty"`
	// Show power as circle on start
	ShowPower bool `protobuf:"varint,5,opt,name=show_power,json=showPower,proto3" json:"show_power,omitempty"`
	// Ratio of random locations diameter to tower grid width
	LocationsScale float32 `protobuf:"fixed32,9,opt,name=locations_scale,json=locationsScale,proto3" json:"locations_scale,omitempty"`
	// FIXME: These are deprecated; remove
	// Max number of UEs for complete simulation
	MinUes uint32 `protobuf:"varint,6,opt,name=min_ues,json=minUes,proto3" json:"min_ues,omitempty"`
	// Max number of UEs for complete simulation
	MaxUes uint32 `protobuf:"varint,7,opt,name=max_ues,json=maxUes,proto3" json:"max_ues,omitempty"`
	// the current number of routes
	CurrentRoutes uint32 `protobuf:"varint,8,opt,name=current_routes,json=currentRoutes,proto3" json:"current_routes,omitempty"`
}

func (m *MapLayout) Reset()         { *m = MapLayout{} }
func (m *MapLayout) String() string { return proto.CompactTextString(m) }
func (*MapLayout) ProtoMessage()    {}
func (*MapLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9d0257bd7c07d7, []int{20}
}
func (m *MapLayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapLayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLayout.Merge(m, src)
}
func (m *MapLayout) XXX_Size() int {
	return m.Size()
}
func (m *MapLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLayout.DiscardUnknown(m)
}

var xxx_messageInfo_MapLayout proto.InternalMessageInfo

func (m *MapLayout) GetCenter() *Coordinate {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *MapLayout) GetZoom() float32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

func (m *MapLayout) GetFade() bool {
	if m != nil {
		return m.Fade
	}
	return false
}

func (m *MapLayout) GetShowRoutes() bool {
	if m != nil {
		return m.ShowRoutes
	}
	return false
}

func (m *MapLayout) GetShowPower() bool {
	if m != nil {
		return m.ShowPower
	}
	return false
}

func (m *MapLayout) GetLocationsScale() float32 {
	if m != nil {
		return m.LocationsScale
	}
	return 0
}

func (m *MapLayout) GetMinUes() uint32 {
	if m != nil {
		return m.MinUes
	}
	return 0
}

func (m *MapLayout) GetMaxUes() uint32 {
	if m != nil {
		return m.MaxUes
	}
	return 0
}

func (m *MapLayout) GetCurrentRoutes() uint32 {
	if m != nil {
		return m.CurrentRoutes
	}
	return 0
}

func init() {
	proto.RegisterEnum("onos.ransim.types.CellType", CellType_name, CellType_value)
	proto.RegisterType((*Coordinate)(nil), "onos.ransim.types.Coordinate")
	proto.RegisterType((*Sector)(nil), "onos.ransim.types.Sector")
	proto.RegisterType((*Route)(nil), "onos.ransim.types.Route")
	proto.RegisterType((*Ue)(nil), "onos.ransim.types.Ue")
	proto.RegisterType((*UECell)(nil), "onos.ransim.types.UECell")
	proto.RegisterType((*UeIdentity)(nil), "onos.ransim.types.UeIdentity")
	proto.RegisterType((*Guami)(nil), "onos.ransim.types.Guami")
	proto.RegisterType((*UeMetrics)(nil), "onos.ransim.types.UeMetrics")
	proto.RegisterType((*Cell)(nil), "onos.ransim.types.Cell")
	proto.RegisterMapType((map[uint64]*Bwp)(nil), "onos.ransim.types.Cell.BwpsEntry")
	proto.RegisterMapType((map[string]*CellSignalInfo)(nil), "onos.ransim.types.Cell.CachedStatesEntry")
	proto.RegisterType((*CellConfig)(nil), "onos.ransim.types.CellConfig")
	proto.RegisterType((*Channel)(nil), "onos.ransim.types.Channel")
	proto.RegisterType((*Beam)(nil), "onos.ransim.types.Beam")
	proto.RegisterType((*MeasurementParams)(nil), "onos.ransim.types.MeasurementParams")
	proto.RegisterMapType((map[NCGI]int32)(nil), "onos.ransim.types.MeasurementParams.NcellIndividualOffsetsEntry")
	proto.RegisterType((*EventA3Params)(nil), "onos.ransim.types.EventA3Params")
	proto.RegisterType((*Bwp)(nil), "onos.ransim.types.Bwp")
	proto.RegisterType((*CellSignalInfo)(nil), "onos.ransim.types.CellSignalInfo")
	proto.RegisterType((*CoverageBoundary)(nil), "onos.ransim.types.CoverageBoundary")
	proto.RegisterType((*Grid)(nil), "onos.ransim.types.Grid")
	proto.RegisterType((*BoundingBox)(nil), "onos.ransim.types.BoundingBox")
	proto.RegisterType((*Node)(nil), "onos.ransim.types.Node")
	proto.RegisterType((*MapLayout)(nil), "onos.ransim.types.MapLayout")
}

func init() { proto.RegisterFile("onos/ransim/types/types.proto", fileDescriptor_4b9d0257bd7c07d7) }

var fileDescriptor_4b9d0257bd7c07d7 = []byte{
	// 2360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x4f, 0x73, 0x1b, 0xb7,
	0x15, 0x37, 0x25, 0x92, 0x22, 0x1f, 0x45, 0x89, 0x82, 0x1d, 0x9b, 0x51, 0x1a, 0x49, 0x65, 0xfe,
	0x39, 0x6d, 0x22, 0x37, 0x76, 0xd2, 0xa6, 0xe9, 0x4c, 0xa7, 0xa2, 0x24, 0x3b, 0x9a, 0xd1, 0x1f,
	0x17, 0x94, 0x0e, 0x3d, 0xed, 0x60, 0x77, 0xc1, 0x25, 0x26, 0xbb, 0xc0, 0x1a, 0x58, 0x52, 0x52,
	0x8e, 0x99, 0x9e, 0x7a, 0xea, 0xa5, 0xd3, 0x2f, 0xd1, 0xe9, 0x57, 0xe8, 0xe4, 0xd4, 0xf6, 0x96,
	0xde, 0x3a, 0x9d, 0xa9, 0xdb, 0x51, 0xbe, 0x45, 0x4e, 0x1d, 0x3c, 0x80, 0x7f, 0x64, 0xd3, 0x4e,
	0xd2, 0x0b, 0x07, 0xf8, 0xbd, 0x1f, 0xb0, 0x0f, 0xef, 0x3d, 0x3c, 0xbc, 0x47, 0x78, 0x5d, 0x49,
	0x65, 0xee, 0x69, 0x26, 0x8d, 0xc8, 0xee, 0x15, 0x97, 0x39, 0x37, 0xee, 0x77, 0x3b, 0xd7, 0xaa,
	0x50, 0x64, 0xcd, 0x8a, 0xb7, 0x9d, 0x78, 0x1b, 0x05, 0xeb, 0xb7, 0x12, 0x95, 0x28, 0x94, 0xde,
	0xb3, 0x23, 0x47, 0xec, 0xfc, 0x04, 0x60, 0x57, 0x29, 0x1d, 0x0b, 0xc9, 0x0a, 0x4e, 0x5a, 0xb0,
	0x98, 0xb2, 0xa2, 0x5d, 0xda, 0x2a, 0xdd, 0x2d, 0x51, 0x3b, 0x44, 0x44, 0x26, 0xed, 0x05, 0x8f,
	0xc8, 0xa4, 0xf3, 0xc7, 0x12, 0x54, 0x7b, 0x3c, 0x2a, 0x94, 0x26, 0x1f, 0x41, 0x35, 0xe2, 0xb2,
	0xe0, 0x1a, 0x57, 0x34, 0xee, 0xbf, 0xbe, 0xfd, 0xdc, 0x67, 0xb7, 0xa7, 0xbb, 0x53, 0x4f, 0x26,
	0x6d, 0x58, 0x62, 0x9f, 0x8b, 0x6c, 0x58, 0x0c, 0xfc, 0xbe, 0xe3, 0xa9, 0xfd, 0x1a, 0xd3, 0x51,
	0x7b, 0x71, 0xab, 0x74, 0xb7, 0x42, 0xed, 0x90, 0x10, 0x28, 0x17, 0x22, 0x2d, 0xda, 0x65, 0x24,
	0xe2, 0x98, 0xdc, 0x86, 0xea, 0x80, 0x8b, 0x64, 0x50, 0xb4, 0x2b, 0x48, 0xf4, 0xb3, 0xce, 0x37,
	0x25, 0xa8, 0x50, 0x35, 0x2c, 0x38, 0x79, 0x07, 0xca, 0x92, 0x65, 0x1c, 0xd5, 0x2a, 0x77, 0x6f,
	0x5e, 0x3d, 0xdd, 0x5c, 0x42, 0xc1, 0xc1, 0xde, 0x37, 0x4f, 0x37, 0xcb, 0x07, 0x47, 0xbd, 0x03,
	0x8a, 0x04, 0xf2, 0x0b, 0xa8, 0x9f, 0xb3, 0xcb, 0x5c, 0x09, 0x59, 0x98, 0xf6, 0xc2, 0xd6, 0xe2,
	0xb7, 0x1f, 0x62, 0xca, 0x27, 0xb7, 0xa0, 0x12, 0xa9, 0x54, 0x69, 0xd4, 0xb7, 0x4e, 0xdd, 0x84,
	0xbc, 0x06, 0x75, 0x93, 0x73, 0x1e, 0x07, 0x6c, 0x94, 0xa0, 0xda, 0x4d, 0x5a, 0x43, 0x60, 0x67,
	0x94, 0x90, 0x4d, 0x68, 0x38, 0xa1, 0x29, 0x62, 0x3e, 0x42, 0xfd, 0x9b, 0x14, 0x10, 0xea, 0x59,
	0xc4, 0xda, 0x46, 0xf3, 0x11, 0xd7, 0x86, 0xb7, 0xab, 0x5b, 0xa5, 0xbb, 0x35, 0x3a, 0x9e, 0x92,
	0xd7, 0x01, 0x24, 0xbf, 0x28, 0x02, 0xfc, 0x78, 0x7b, 0x09, 0x57, 0xd6, 0x2d, 0xf2, 0xd8, 0x02,
	0x9d, 0xbf, 0x2c, 0xc2, 0xc2, 0x19, 0x27, 0x6f, 0x42, 0x59, 0x64, 0x46, 0xf8, 0x93, 0xb7, 0xae,
	0xfc, 0x71, 0xa7, 0xc7, 0xb6, 0x52, 0xf2, 0x01, 0x94, 0x87, 0x5c, 0xc4, 0x68, 0xfe, 0xf9, 0x27,
	0x3e, 0xe3, 0x07, 0x31, 0x97, 0x85, 0x28, 0x2e, 0x29, 0x52, 0xd1, 0x11, 0x97, 0x39, 0xf7, 0x67,
	0xc5, 0xb1, 0x3d, 0xaa, 0xd6, 0x51, 0x60, 0x0a, 0x56, 0xf0, 0xf1, 0x51, 0xb5, 0x8e, 0x7a, 0x76,
	0x4e, 0x7e, 0x0e, 0xb5, 0x54, 0x45, 0xac, 0x10, 0x4a, 0xe2, 0x39, 0xbf, 0xd5, 0xb2, 0x13, 0xba,
	0x35, 0xc2, 0x80, 0xb3, 0x58, 0xc8, 0x04, 0x8d, 0xd0, 0xa4, 0xe3, 0x29, 0xb9, 0x03, 0x4b, 0x7d,
	0x31, 0xe2, 0xc1, 0x13, 0x81, 0x16, 0xa8, 0xd0, 0xaa, 0x9d, 0xfe, 0x5a, 0x90, 0xf7, 0xa1, 0x1c,
	0xf1, 0x34, 0x6d, 0xd7, 0xf0, 0x4b, 0xaf, 0xce, 0x3b, 0xd1, 0xfe, 0x2e, 0x4f, 0x53, 0x8a, 0x34,
	0x72, 0x17, 0x2a, 0x91, 0x96, 0x85, 0x68, 0xd7, 0xed, 0xfe, 0x5d, 0x72, 0xf5, 0x74, 0xb3, 0xb2,
	0x4b, 0x8f, 0x4f, 0xad, 0xa1, 0xdc, 0x80, 0x3a, 0x02, 0xb9, 0x07, 0x15, 0xbb, 0xc2, 0xb4, 0x01,
	0xa3, 0xe3, 0x25, 0x3b, 0x3b, 0xde, 0x4c, 0x74, 0x36, 0x30, 0x66, 0xfd, 0xcc, 0xba, 0x5e, 0x98,
	0x80, 0xc5, 0x99, 0x28, 0x0a, 0x1e, 0xb7, 0x97, 0xd1, 0xbb, 0x20, 0xcc, 0x8e, 0x47, 0x3a, 0xff,
	0x2e, 0x41, 0xd5, 0x6d, 0x45, 0x3a, 0xb0, 0x20, 0x62, 0xef, 0x43, 0xd4, 0xed, 0x91, 0x0c, 0x31,
	0x76, 0xdd, 0x80, 0x2e, 0x88, 0x98, 0xfc, 0x00, 0xca, 0x32, 0x4a, 0x04, 0xfa, 0xb0, 0xdc, 0xad,
	0x59, 0x0f, 0x1f, 0xef, 0x3e, 0xb2, 0x81, 0x1d, 0x25, 0xc2, 0xba, 0x4b, 0x1b, 0x9d, 0xa3, 0xbb,
	0x4a, 0x14, 0xc7, 0x1e, 0x7b, 0x32, 0xbe, 0x4b, 0x76, 0x6c, 0x31, 0x23, 0xa4, 0x46, 0x0f, 0x95,
	0x28, 0x8e, 0xc9, 0x07, 0x50, 0x0b, 0xcf, 0xf3, 0x40, 0xf3, 0xbe, 0x69, 0x57, 0xf1, 0xd4, 0xb7,
	0xe7, 0x9c, 0xba, 0x7b, 0x9e, 0xd3, 0xa5, 0xf0, 0x3c, 0xa7, 0xbc, 0x6f, 0x48, 0x07, 0x9a, 0x6c,
	0xc4, 0x44, 0x1a, 0xe4, 0x3a, 0x34, 0x41, 0x9c, 0xfa, 0xf8, 0x6c, 0x20, 0xf8, 0x58, 0x87, 0x66,
	0x2f, 0xed, 0x68, 0x80, 0x69, 0x54, 0x91, 0x6d, 0xa8, 0x24, 0x43, 0x96, 0x09, 0x9f, 0x3a, 0xda,
	0x73, 0xbe, 0xf0, 0xc8, 0xca, 0xa9, 0xa3, 0x91, 0x0f, 0x61, 0x85, 0x65, 0xfd, 0x60, 0xc8, 0x03,
	0x99, 0xb0, 0x3c, 0xf0, 0xc1, 0x5b, 0xee, 0xae, 0x7e, 0xf3, 0x74, 0xb3, 0xb1, 0x93, 0xf5, 0xcf,
	0xf6, 0x8f, 0x13, 0x96, 0x1f, 0xec, 0xd1, 0x06, 0xcb, 0xfa, 0x67, 0x1c, 0x27, 0x71, 0xe7, 0x8b,
	0x12, 0x54, 0x70, 0x1b, 0xeb, 0x96, 0x3c, 0xcd, 0xa4, 0x37, 0x6b, 0x93, 0xfa, 0x19, 0x6a, 0x9e,
	0xf5, 0x03, 0xcd, 0x13, 0xa1, 0xe4, 0x78, 0xdb, 0x26, 0xee, 0x42, 0x11, 0x3b, 0xb0, 0xa6, 0x06,
	0xcb, 0x31, 0xbc, 0xb0, 0x84, 0x45, 0x17, 0xe8, 0x2c, 0xeb, 0xf7, 0x78, 0x71, 0x10, 0x5b, 0xc7,
	0x5a, 0x29, 0xde, 0x4b, 0xae, 0xfd, 0x3d, 0xb0, 0x0b, 0x1e, 0x3b, 0xa4, 0x33, 0x84, 0xfa, 0x19,
	0x3f, 0xe2, 0x85, 0x16, 0x91, 0xb1, 0xd7, 0x78, 0xa0, 0x82, 0x94, 0x15, 0x5c, 0x46, 0x97, 0xa8,
	0xcb, 0x22, 0xad, 0x0f, 0xd4, 0xa1, 0x03, 0xc8, 0x36, 0xdc, 0x1c, 0xa8, 0x40, 0xf3, 0x5c, 0xe9,
	0x22, 0x28, 0x44, 0xc6, 0x4d, 0xc1, 0xb2, 0x1c, 0x95, 0x5a, 0xa4, 0x6b, 0x03, 0x45, 0x51, 0x72,
	0x3a, 0x16, 0x90, 0x57, 0xa1, 0x26, 0x4c, 0xd0, 0x17, 0xda, 0x14, 0xa8, 0x58, 0x8d, 0x2e, 0x09,
	0xf3, 0xd0, 0x4e, 0x3b, 0x5f, 0x2e, 0x41, 0x19, 0xa3, 0xe9, 0x97, 0xd0, 0xb0, 0xa1, 0x19, 0x44,
	0x4a, 0xf6, 0x45, 0xf2, 0xb2, 0x5c, 0xcd, 0xd3, 0x74, 0x17, 0x49, 0x14, 0xa2, 0xc9, 0xd8, 0xe6,
	0x94, 0x99, 0x48, 0xc3, 0x9c, 0x62, 0x23, 0xed, 0x99, 0x88, 0x9b, 0x9f, 0x0d, 0xdf, 0x80, 0xa5,
	0x8c, 0x5d, 0x04, 0x43, 0x6e, 0x9c, 0x61, 0xba, 0x70, 0xf5, 0x74, 0xb3, 0x7a, 0xc4, 0x2e, 0xce,
	0xf6, 0x0d, 0xad, 0x66, 0xec, 0xe2, 0x8c, 0x1b, 0xf2, 0x36, 0xd4, 0xa5, 0xbd, 0x24, 0xa1, 0xd2,
	0xa6, 0x5d, 0xd9, 0x5a, 0xbc, 0x16, 0xcf, 0x53, 0x11, 0xe9, 0x01, 0xc9, 0x38, 0x33, 0x43, 0xcd,
	0x33, 0x2e, 0x8b, 0x20, 0x67, 0x9a, 0x65, 0x06, 0x53, 0x44, 0xe3, 0xfe, 0x9b, 0x73, 0xce, 0x73,
	0x34, 0x25, 0x3f, 0x46, 0x2e, 0x5d, 0xcb, 0x9e, 0x85, 0xec, 0x9b, 0x93, 0x47, 0xc2, 0x07, 0xac,
	0x1d, 0xda, 0x50, 0xe1, 0x4c, 0xf7, 0x23, 0x89, 0xd9, 0xa4, 0x49, 0xfd, 0x8c, 0x7c, 0x0c, 0x75,
	0xb4, 0x23, 0xe6, 0x41, 0x9b, 0x38, 0x56, 0xee, 0xbf, 0xf6, 0x02, 0x2b, 0x9e, 0x5e, 0xe6, 0x9c,
	0xd6, 0x22, 0x3f, 0x22, 0x1f, 0x41, 0x39, 0x3c, 0xcf, 0xc7, 0x39, 0xe4, 0x87, 0x2f, 0x58, 0x64,
	0xaf, 0x94, 0xd9, 0x97, 0x85, 0xbe, 0xa4, 0x48, 0x27, 0x6f, 0xc2, 0x8a, 0xcd, 0xaf, 0x22, 0x4e,
	0x79, 0x10, 0xa9, 0xa1, 0x74, 0x29, 0xa5, 0x49, 0x97, 0xb5, 0x8e, 0x0e, 0xe2, 0x94, 0xef, 0x5a,
	0xcc, 0x86, 0x8c, 0x65, 0x45, 0x4a, 0x4a, 0x1e, 0x15, 0x3c, 0xf6, 0xd4, 0x65, 0xa4, 0xae, 0x69,
	0x1d, 0xed, 0x8e, 0x25, 0x8e, 0x7f, 0x1b, 0xaa, 0x11, 0x8b, 0x06, 0x3c, 0x6e, 0x37, 0x31, 0x60,
	0xfc, 0x8c, 0x1c, 0x43, 0xd3, 0x8d, 0x5c, 0x42, 0x37, 0xed, 0x15, 0xd4, 0xf6, 0xdd, 0x17, 0x69,
	0xbb, 0x8b, 0x64, 0x4c, 0xf6, 0x5e, 0xeb, 0xe5, 0x68, 0x06, 0x22, 0xef, 0x01, 0x89, 0x86, 0x5a,
	0x5b, 0x4f, 0xe1, 0x86, 0xc1, 0x80, 0x99, 0x41, 0x7b, 0x15, 0xa3, 0xa3, 0xe5, 0x25, 0x48, 0xfd,
	0x94, 0x99, 0x01, 0xb9, 0x0f, 0xaf, 0x68, 0x6e, 0xd4, 0x50, 0x47, 0x3c, 0x60, 0x69, 0xaa, 0xa2,
	0xc0, 0x44, 0x03, 0x9e, 0xf1, 0x76, 0x0b, 0x17, 0xdc, 0x1c, 0x0b, 0x77, 0xac, 0xac, 0x87, 0x22,
	0xf2, 0x63, 0x28, 0x27, 0x5a, 0xc4, 0xed, 0x35, 0x8c, 0x80, 0x3b, 0xf3, 0x52, 0x88, 0x16, 0x31,
	0x45, 0xd2, 0xfa, 0x09, 0xd4, 0x27, 0xf6, 0xb5, 0x4e, 0xff, 0x8c, 0xbb, 0xeb, 0x57, 0xa6, 0x76,
	0x48, 0xde, 0x83, 0xca, 0x88, 0xa5, 0x43, 0xee, 0xdf, 0xc4, 0x17, 0x65, 0x3c, 0x47, 0xfa, 0x64,
	0xe1, 0xe3, 0xd2, 0x7a, 0x08, 0x6b, 0xcf, 0x99, 0x60, 0x76, 0xe3, 0xba, 0xdb, 0xf8, 0x67, 0xd7,
	0x37, 0x7e, 0x91, 0xf3, 0x7b, 0x22, 0x91, 0x2c, 0x3d, 0x90, 0x7d, 0x35, 0xf3, 0x8d, 0xce, 0x3f,
	0x4a, 0x00, 0xd3, 0x5b, 0x49, 0xde, 0x87, 0x46, 0x71, 0x11, 0xe4, 0xea, 0x9c, 0xeb, 0x20, 0x0e,
	0x5d, 0x9d, 0xd6, 0x6d, 0x5e, 0x3d, 0xdd, 0xac, 0x9f, 0x5e, 0x3c, 0xb6, 0x68, 0xdc, 0xa5, 0xf5,
	0xc2, 0x0d, 0xf7, 0x42, 0xf2, 0x01, 0x54, 0x0d, 0x56, 0x6a, 0xfe, 0xdb, 0xf3, 0x1e, 0x2f, 0x57,
	0xca, 0x51, 0x4f, 0x24, 0x1f, 0xc2, 0x52, 0x34, 0x60, 0x52, 0xf2, 0x14, 0xef, 0x71, 0xe3, 0xfe,
	0xfa, 0x3c, 0x7d, 0x1d, 0x83, 0x8e, 0xa9, 0xd6, 0x11, 0x21, 0x67, 0x19, 0x5e, 0xf1, 0xf9, 0x8e,
	0xe8, 0x72, 0x96, 0x51, 0x24, 0x75, 0xfe, 0xb0, 0x00, 0x4b, 0x7e, 0x07, 0xf2, 0x06, 0x34, 0x8d,
	0x09, 0x83, 0xbe, 0xe6, 0x4f, 0x86, 0x93, 0x84, 0xd8, 0xa4, 0xcb, 0xc6, 0x84, 0x0f, 0xc7, 0x98,
	0xcd, 0x71, 0x78, 0x01, 0xed, 0xbb, 0xe2, 0xb2, 0xf3, 0x12, 0xce, 0xf7, 0xd2, 0xa9, 0x68, 0x98,
	0xfa, 0xbc, 0xec, 0x44, 0x67, 0x29, 0xd9, 0x82, 0x06, 0x97, 0x23, 0xa1, 0x95, 0xb4, 0x97, 0x1d,
	0x55, 0xab, 0xd3, 0x59, 0x88, 0xbc, 0x03, 0xad, 0xd0, 0x04, 0xfe, 0x0c, 0x41, 0x78, 0x6e, 0xf7,
	0x77, 0x15, 0x59, 0x33, 0x34, 0x5e, 0xc3, 0xee, 0xf9, 0x5e, 0xfa, 0x3c, 0x71, 0x98, 0xfa, 0xc2,
	0x64, 0x96, 0x78, 0x96, 0x92, 0x77, 0x61, 0xed, 0x3a, 0xd1, 0x0c, 0xc7, 0x4f, 0xe1, 0xca, 0x0c,
	0xb3, 0x37, 0x4c, 0xb1, 0xb0, 0x56, 0x06, 0x33, 0x4c, 0x8d, 0xda, 0x61, 0xe7, 0xef, 0x25, 0x28,
	0x5b, 0x33, 0xe1, 0x13, 0xf1, 0x20, 0x0e, 0x03, 0x26, 0x93, 0x94, 0xfb, 0x62, 0xbc, 0x6e, 0x91,
	0x1d, 0x0b, 0x58, 0xf1, 0x68, 0x2a, 0x76, 0x15, 0x74, 0x7d, 0x34, 0x11, 0xbf, 0x0a, 0x35, 0x9b,
	0x71, 0x13, 0x26, 0xa4, 0x7f, 0xfd, 0x6d, 0x06, 0x7e, 0xc4, 0x84, 0xb4, 0x37, 0xd2, 0x8a, 0x58,
	0x51, 0x70, 0x39, 0xc4, 0x52, 0xcb, 0x46, 0x91, 0x2b, 0x07, 0x5a, 0x19, 0xbb, 0xd8, 0x99, 0x0a,
	0xf6, 0x42, 0xf2, 0x09, 0xac, 0x8f, 0x02, 0x23, 0x62, 0x1e, 0xa4, 0x2a, 0xe4, 0xcf, 0xae, 0x72,
	0x05, 0xc3, 0xed, 0x51, 0x4f, 0xc4, 0xfc, 0x50, 0x85, 0xfc, 0xda, 0xda, 0xce, 0xbf, 0x16, 0x61,
	0xed, 0xb9, 0xec, 0x4b, 0xde, 0x86, 0x55, 0xfb, 0xa4, 0x05, 0x85, 0x0a, 0x0a, 0x2d, 0x92, 0xc4,
	0x37, 0x0e, 0x15, 0xda, 0xb4, 0xf0, 0xa9, 0x3a, 0x75, 0x20, 0x79, 0x17, 0x5a, 0x93, 0x88, 0x08,
	0x54, 0xbf, 0x6f, 0x78, 0x81, 0xe7, 0xac, 0xd0, 0xd5, 0x09, 0x7e, 0x82, 0x30, 0xf9, 0x29, 0xdc,
	0xc9, 0x31, 0x29, 0x0b, 0x19, 0x8b, 0x91, 0x88, 0x87, 0x2c, 0x1d, 0xaf, 0x70, 0x5d, 0xc4, 0x2b,
	0x28, 0x3e, 0x98, 0x48, 0xfd, 0xba, 0xdf, 0x96, 0xa0, 0x2d, 0xe7, 0x2f, 0xb4, 0x2f, 0x95, 0x4d,
	0x7c, 0xbf, 0xfa, 0x2e, 0x2f, 0xca, 0xf6, 0xf1, 0xbc, 0xed, 0x5d, 0x32, 0xe8, 0xd6, 0xbe, 0xf8,
	0x8f, 0x7f, 0xc4, 0x6e, 0xcb, 0xb9, 0x34, 0xb2, 0x01, 0x30, 0xb8, 0x34, 0x05, 0xd7, 0xdc, 0x08,
	0xe3, 0xdb, 0x99, 0x19, 0x84, 0x7c, 0x0a, 0xab, 0x7c, 0x64, 0x33, 0x28, 0x7b, 0x70, 0xfd, 0xb9,
	0xdb, 0x9a, 0xa3, 0xdc, 0xbe, 0x65, 0xee, 0x3c, 0xf0, 0x4f, 0x5d, 0x93, 0xcf, 0x4e, 0xd7, 0x0f,
	0xe0, 0xb5, 0x97, 0xa8, 0x3a, 0x27, 0x21, 0xde, 0x9a, 0xcd, 0x5b, 0x95, 0xd9, 0xa4, 0x74, 0x0a,
	0xcd, 0x6b, 0x9f, 0xb2, 0x7d, 0x00, 0x7b, 0x30, 0x36, 0xbb, 0xf3, 0x68, 0x8d, 0x3d, 0xf0, 0x96,
	0x7e, 0x1b, 0x56, 0x7d, 0x39, 0xa3, 0x64, 0x90, 0x72, 0x36, 0x72, 0x3b, 0xd6, 0x68, 0xd3, 0xc1,
	0x27, 0xf2, 0xd0, 0x82, 0x9d, 0x04, 0x16, 0xbb, 0xe7, 0x39, 0x59, 0x99, 0x96, 0xbe, 0x58, 0xe6,
	0xb6, 0x60, 0xd1, 0x44, 0xc6, 0x2b, 0x61, 0x87, 0xb6, 0x62, 0x93, 0xc3, 0x2c, 0xe4, 0x3a, 0x50,
	0xfd, 0x40, 0x87, 0xc6, 0x3b, 0xba, 0xe1, 0xc0, 0x93, 0x3e, 0x0d, 0x0d, 0x59, 0x87, 0x5a, 0xac,
	0xce, 0x65, 0x2a, 0xe4, 0x67, 0x18, 0xdf, 0x35, 0x3a, 0x99, 0x77, 0xbe, 0x2c, 0xc1, 0xca, 0xf5,
	0x8c, 0x4b, 0x7e, 0x03, 0xb7, 0x75, 0x1e, 0x44, 0x6a, 0xc4, 0x35, 0x4b, 0x78, 0x10, 0xaa, 0xa1,
	0x8c, 0x99, 0x16, 0xdc, 0xb4, 0x4b, 0x18, 0x0a, 0x6f, 0xcc, 0xed, 0x5c, 0x1c, 0xbb, 0xeb, 0xc8,
	0x97, 0xf4, 0x96, 0xce, 0x9f, 0xc1, 0x04, 0x37, 0xe4, 0x14, 0x6e, 0xce, 0xdb, 0x77, 0xe1, 0xbb,
	0xef, 0x4b, 0xa2, 0xe7, 0x76, 0xed, 0xfc, 0xae, 0x04, 0xad, 0x67, 0x89, 0x58, 0x08, 0xf0, 0x7e,
	0x60, 0xf0, 0x5c, 0x81, 0x29, 0x34, 0x97, 0x49, 0x31, 0xf0, 0x09, 0x64, 0x4d, 0xf3, 0xbe, 0x3b,
	0x71, 0xcf, 0x0b, 0xc8, 0x43, 0x58, 0xf5, 0x1a, 0x5d, 0x06, 0xdf, 0xa7, 0x05, 0x5e, 0x19, 0xaf,
	0xc2, 0x02, 0xd7, 0x74, 0xfe, 0x5c, 0x82, 0xb2, 0x7d, 0x68, 0x31, 0x9b, 0x0f, 0x58, 0xac, 0xce,
	0x85, 0x4c, 0x82, 0x8c, 0xe5, 0x68, 0xbd, 0x12, 0x5d, 0x9e, 0x80, 0x47, 0x2c, 0xb7, 0xd5, 0xa8,
	0x7d, 0x8f, 0xbf, 0xd7, 0x17, 0xc1, 0xae, 0x70, 0x5f, 0x23, 0x3b, 0xb0, 0x8c, 0xdf, 0xb7, 0xdf,
	0x08, 0xd5, 0x85, 0x7f, 0xa6, 0x36, 0xe6, 0xbd, 0x39, 0x9e, 0xd6, 0x55, 0x17, 0xb4, 0x11, 0x4e,
	0x27, 0x9d, 0x27, 0xd0, 0x98, 0x91, 0xd9, 0xa6, 0x32, 0x13, 0x32, 0x98, 0xfe, 0xf3, 0x51, 0xcd,
	0x84, 0x3c, 0x64, 0xc5, 0x44, 0x30, 0xf9, 0x03, 0x04, 0x05, 0xae, 0x0d, 0xb5, 0x89, 0xd4, 0xae,
	0x58, 0xf4, 0x02, 0x76, 0x31, 0x5e, 0x61, 0x05, 0x32, 0xf1, 0x69, 0x15, 0x05, 0x32, 0xe9, 0xfc,
	0xb5, 0x04, 0xe5, 0x63, 0x15, 0x73, 0xdb, 0x79, 0x72, 0x19, 0x8e, 0xdb, 0x90, 0xb9, 0xdd, 0x9d,
	0x23, 0xd8, 0x07, 0x2c, 0x52, 0xb2, 0xd0, 0x2a, 0x4d, 0xb9, 0x76, 0x86, 0xaa, 0xd3, 0x59, 0x88,
	0xbc, 0x05, 0x2b, 0x86, 0xeb, 0x91, 0x88, 0x78, 0x90, 0xa9, 0x98, 0xa7, 0xf6, 0x2a, 0x58, 0x52,
	0xd3, 0xa3, 0x47, 0x08, 0x92, 0x0f, 0x01, 0xab, 0xf9, 0x80, 0x47, 0x89, 0x70, 0xc9, 0xad, 0xdc,
	0x7d, 0xc5, 0x16, 0x0d, 0xf6, 0x16, 0xd8, 0xf4, 0x64, 0xa6, 0xc5, 0xb6, 0x25, 0xee, 0x5b, 0x9e,
	0x2d, 0x13, 0x6d, 0xd9, 0x36, 0x74, 0x69, 0xa9, 0x4e, 0xfd, 0xac, 0xf3, 0xa7, 0x05, 0xa8, 0x1f,
	0xb1, 0xfc, 0x90, 0x5d, 0xaa, 0x61, 0xf1, 0xff, 0xfe, 0x05, 0x44, 0xa0, 0xfc, 0xb9, 0x52, 0x19,
	0x9a, 0x75, 0x81, 0xe2, 0xd8, 0x62, 0x7d, 0x16, 0x73, 0xdf, 0xc6, 0xe0, 0x18, 0xff, 0x2f, 0x19,
	0xa8, 0xf3, 0x40, 0xab, 0x61, 0xe1, 0x5b, 0x88, 0x1a, 0x05, 0x0b, 0xe1, 0xff, 0x39, 0xd8, 0x4e,
	0x21, 0x01, 0x6b, 0x22, 0xd4, 0xb4, 0x46, 0xeb, 0x16, 0xc1, 0x1a, 0x88, 0xbc, 0x03, 0xab, 0xe3,
	0x7f, 0x15, 0x4c, 0x60, 0x22, 0x96, 0xba, 0xc2, 0x7d, 0x81, 0xae, 0x4c, 0xe0, 0x9e, 0x45, 0xc7,
	0xae, 0xb6, 0x7d, 0x8a, 0x7b, 0xd9, 0xad, 0xab, 0x6d, 0x6f, 0x72, 0x67, 0xda, 0xc0, 0x2c, 0x79,
	0x81, 0x6b, 0x5a, 0xde, 0x82, 0x95, 0x71, 0x79, 0xeb, 0xb5, 0x73, 0xdd, 0x42, 0xd3, 0xa3, 0x4e,
	0xc1, 0x1f, 0xed, 0x42, 0x6d, 0xdc, 0x10, 0x90, 0x3a, 0x54, 0x1e, 0xee, 0x1f, 0x9d, 0x9e, 0xb4,
	0x6e, 0x90, 0x15, 0x80, 0xfd, 0xe3, 0xd3, 0x7d, 0xfa, 0x98, 0x1e, 0xf4, 0xf6, 0x5b, 0x25, 0xb2,
	0x06, 0xcd, 0x93, 0xb3, 0xd3, 0xbd, 0x93, 0x13, 0x1a, 0xf4, 0x8e, 0x76, 0x0e, 0x0f, 0x5b, 0x0b,
	0x96, 0x7d, 0xb4, 0xb3, 0x4b, 0x4f, 0x5a, 0x8b, 0xdd, 0xf6, 0xdf, 0xae, 0x36, 0x4a, 0x5f, 0x5d,
	0x6d, 0x94, 0xfe, 0x7b, 0xb5, 0x51, 0xfa, 0xfd, 0xd7, 0x1b, 0x37, 0xbe, 0xfa, 0x7a, 0xe3, 0xc6,
	0x3f, 0xbf, 0xde, 0xb8, 0x11, 0x56, 0xf1, 0x6f, 0xbc, 0x07, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x79, 0x74, 0xc8, 0x10, 0x14, 0x00, 0x00,
}

func (m *Coordinate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coordinate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coordinate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Sector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Tilt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tilt))))
		i--
		dAtA[i] = 0x21
	}
	if m.Arc != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Arc))
		i--
		dAtA[i] = 0x18
	}
	if m.Azimuth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Azimuth))))
		i--
		dAtA[i] = 0x11
	}
	if m.Center != nil {
		{
			size, err := m.Center.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPoint != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextPoint))
		i--
		dAtA[i] = 0x38
	}
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SpeedStdev != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SpeedStdev))
		i--
		dAtA[i] = 0x28
	}
	if m.SpeedAvg != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SpeedAvg))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Waypoints) > 0 {
		for iNdEx := len(m.Waypoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Waypoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RouteID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmitted {
		i--
		if m.IsAdmitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Height))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CRNTI != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CRNTI))
		i--
		dAtA[i] = 0x48
	}
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FiveQi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FiveQi))
		i--
		dAtA[i] = 0x38
	}
	if m.Heading != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Heading))
		i--
		dAtA[i] = 0x30
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RrcState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RrcState))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ueid != nil {
		{
			size, err := m.Ueid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IMSI != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IMSI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UECell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UECell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UECell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvailPrbsDl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AvailPrbsDl))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BwpRefs) > 0 {
		for iNdEx := len(m.BwpRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BwpRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Sinr != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sinr))))
		i--
		dAtA[i] = 0x29
	}
	if m.Rsrq != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rsrq))))
		i--
		dAtA[i] = 0x21
	}
	if m.Rsrp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rsrp))))
		i--
		dAtA[i] = 0x19
	}
	if m.Ncgi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Ncgi))
		i--
		dAtA[i] = 0x10
	}
	if m.GnbID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GnbID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UeIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmfUeNgapId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AmfUeNgapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Guami != nil {
		{
			size, err := m.Guami.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Guami) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guami) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guami) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmfPointer != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AmfPointer))
		i--
		dAtA[i] = 0x20
	}
	if m.AmfSetId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AmfSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.AmfRegionId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AmfRegionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Plmnid != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Plmnid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFirst {
		i--
		if m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.HoReportTimestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoReportTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.HoLatency != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoLatency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Grid != nil {
		{
			size, err := m.Grid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ResourceAllocScheme) > 0 {
		i -= len(m.ResourceAllocScheme)
		copy(dAtA[i:], m.ResourceAllocScheme)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceAllocScheme)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CurrentStateHash) > 0 {
		i -= len(m.CurrentStateHash)
		copy(dAtA[i:], m.CurrentStateHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentStateHash)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CachedStates) > 0 {
		for k := range m.CachedStates {
			v := m.CachedStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Cached {
		i--
		if m.Cached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.RrcConnectedCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RrcConnectedCount))
		i--
		dAtA[i] = 0x60
	}
	if m.RrcIdleCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RrcIdleCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Bwps) > 0 {
		for k := range m.Bwps {
			v := m.Bwps[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTypes(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CellType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CellType))
		i--
		dAtA[i] = 0x48
	}
	if m.Earfcn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Earfcn))
		i--
		dAtA[i] = 0x40
	}
	if m.Pci != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Pci))
		i--
		dAtA[i] = 0x38
	}
	if m.MeasurementParams != nil {
		{
			size, err := m.MeasurementParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Neighbors) > 0 {
		dAtA11 := make([]byte, len(m.Neighbors)*10)
		var j10 int
		for _, num := range m.Neighbors {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTypes(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxUEs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUEs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NCGI != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NCGI))
		i--
		dAtA[i] = 0x10
	}
	if m.CellConfig != nil {
		{
			size, err := m.CellConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Beam != nil {
		{
			size, err := m.Beam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sector != nil {
		{
			size, err := m.Sector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TxPowerdB != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TxPowerdB))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Channel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Los {
		i--
		if m.Los {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.BsChannelBwSul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BsChannelBwSul))
		i--
		dAtA[i] = 0x38
	}
	if m.BsChannelBwUl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BsChannelBwUl))
		i--
		dAtA[i] = 0x30
	}
	if m.BsChannelBwDl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BsChannelBwDl))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x22
	}
	if m.ArfcnUl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ArfcnUl))
		i--
		dAtA[i] = 0x18
	}
	if m.ArfcnDl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ArfcnDl))
		i--
		dAtA[i] = 0x10
	}
	if m.SsbFrequency != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SsbFrequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Beam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Beam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Beam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VSideLobeAttenuationDb != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VSideLobeAttenuationDb))))
		i--
		dAtA[i] = 0x29
	}
	if m.MaxAttenuationDb != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxAttenuationDb))))
		i--
		dAtA[i] = 0x21
	}
	if m.MaxGain != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxGain))))
		i--
		dAtA[i] = 0x19
	}
	if m.V3DbAngle != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.V3DbAngle))))
		i--
		dAtA[i] = 0x11
	}
	if m.H3DbAngle != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.H3DbAngle))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *MeasurementParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeasurementParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeasurementParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventA3Params != nil {
		{
			size, err := m.EventA3Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Hysteresis != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Hysteresis))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NcellIndividualOffsets) > 0 {
		for k := range m.NcellIndividualOffsets {
			v := m.NcellIndividualOffsets[k]
			baseI := i
			i = encodeVarintTypes(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTypes(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PcellIndividualOffset != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PcellIndividualOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.FrequencyOffset != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FrequencyOffset))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeToTrigger != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeToTrigger))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventA3Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventA3Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventA3Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportOnLeave {
		i--
		if m.ReportOnLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.A3Offset != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.A3Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bwp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bwp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bwp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Downlink {
		i--
		if m.Downlink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NumberOfRbs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NumberOfRbs))
		i--
		dAtA[i] = 0x18
	}
	if m.Scs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Scs))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CellSignalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellSignalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellSignalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoverageBoundaries) > 0 {
		for iNdEx := len(m.CoverageBoundaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoverageBoundaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RpCoverageBoundaries) > 0 {
		for iNdEx := len(m.RpCoverageBoundaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpCoverageBoundaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoverageBoundary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoverageBoundary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoverageBoundary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BoundaryPoints) > 0 {
		for iNdEx := len(m.BoundaryPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BoundaryPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RefSignalStrength != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RefSignalStrength))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Grid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Grid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Grid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoundingBox != nil {
		{
			size, err := m.BoundingBox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GridPoints) > 0 {
		for iNdEx := len(m.GridPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GridPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ShadowingMap) > 0 {
		for iNdEx := len(m.ShadowingMap) - 1; iNdEx >= 0; iNdEx-- {
			f18 := math.Float64bits(float64(m.ShadowingMap[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f18))
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ShadowingMap)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BoundingBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundingBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoundingBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxLng))))
		i--
		dAtA[i] = 0x21
	}
	if m.MaxLat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxLat))))
		i--
		dAtA[i] = 0x19
	}
	if m.MinLng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinLng))))
		i--
		dAtA[i] = 0x11
	}
	if m.MinLat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinLat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CellNCGIs) > 0 {
		dAtA20 := make([]byte, len(m.CellNCGIs)*10)
		var j19 int
		for _, num := range m.CellNCGIs {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintTypes(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceModels) > 0 {
		for iNdEx := len(m.ServiceModels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceModels[iNdEx])
			copy(dAtA[i:], m.ServiceModels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceModels[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Controllers) > 0 {
		for iNdEx := len(m.Controllers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Controllers[iNdEx])
			copy(dAtA[i:], m.Controllers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Controllers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GnbID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GnbID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapLayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapLayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapLayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocationsScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LocationsScale))))
		i--
		dAtA[i] = 0x4d
	}
	if m.CurrentRoutes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentRoutes))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUes))
		i--
		dAtA[i] = 0x38
	}
	if m.MinUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinUes))
		i--
		dAtA[i] = 0x30
	}
	if m.ShowPower {
		i--
		if m.ShowPower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ShowRoutes {
		i--
		if m.ShowRoutes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Fade {
		i--
		if m.Fade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Zoom != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Zoom))))
		i--
		dAtA[i] = 0x15
	}
	if m.Center != nil {
		{
			size, err := m.Center.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Coordinate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	return n
}

func (m *Sector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Azimuth != 0 {
		n += 9
	}
	if m.Arc != 0 {
		n += 1 + sovTypes(uint64(m.Arc))
	}
	if m.Tilt != 0 {
		n += 9
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteID != 0 {
		n += 1 + sovTypes(uint64(m.RouteID))
	}
	if len(m.Waypoints) > 0 {
		for _, e := range m.Waypoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SpeedAvg != 0 {
		n += 1 + sovTypes(uint64(m.SpeedAvg))
	}
	if m.SpeedStdev != 0 {
		n += 1 + sovTypes(uint64(m.SpeedStdev))
	}
	if m.Reverse {
		n += 2
	}
	if m.NextPoint != 0 {
		n += 1 + sovTypes(uint64(m.NextPoint))
	}
	return n
}

func (m *Ue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IMSI != 0 {
		n += 1 + sovTypes(uint64(m.IMSI))
	}
	if m.Ueid != nil {
		l = m.Ueid.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RrcState != 0 {
		n += 1 + sovTypes(uint64(m.RrcState))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Heading != 0 {
		n += 1 + sovTypes(uint64(m.Heading))
	}
	if m.FiveQi != 0 {
		n += 1 + sovTypes(uint64(m.FiveQi))
	}
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CRNTI != 0 {
		n += 1 + sovTypes(uint64(m.CRNTI))
	}
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 9
	}
	if m.IsAdmitted {
		n += 2
	}
	return n
}

func (m *UECell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GnbID != 0 {
		n += 1 + sovTypes(uint64(m.GnbID))
	}
	if m.Ncgi != 0 {
		n += 1 + sovTypes(uint64(m.Ncgi))
	}
	if m.Rsrp != 0 {
		n += 9
	}
	if m.Rsrq != 0 {
		n += 9
	}
	if m.Sinr != 0 {
		n += 9
	}
	if len(m.BwpRefs) > 0 {
		for _, e := range m.BwpRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AvailPrbsDl != 0 {
		n += 1 + sovTypes(uint64(m.AvailPrbsDl))
	}
	return n
}

func (m *UeIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Guami != nil {
		l = m.Guami.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AmfUeNgapId != 0 {
		n += 1 + sovTypes(uint64(m.AmfUeNgapId))
	}
	return n
}

func (m *Guami) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plmnid != 0 {
		n += 1 + sovTypes(uint64(m.Plmnid))
	}
	if m.AmfRegionId != 0 {
		n += 1 + sovTypes(uint64(m.AmfRegionId))
	}
	if m.AmfSetId != 0 {
		n += 1 + sovTypes(uint64(m.AmfSetId))
	}
	if m.AmfPointer != 0 {
		n += 1 + sovTypes(uint64(m.AmfPointer))
	}
	return n
}

func (m *UeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoLatency != 0 {
		n += 1 + sovTypes(uint64(m.HoLatency))
	}
	if m.HoReportTimestamp != 0 {
		n += 1 + sovTypes(uint64(m.HoReportTimestamp))
	}
	if m.IsFirst {
		n += 2
	}
	return n
}

func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfig != nil {
		l = m.CellConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NCGI != 0 {
		n += 1 + sovTypes(uint64(m.NCGI))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxUEs != 0 {
		n += 1 + sovTypes(uint64(m.MaxUEs))
	}
	if len(m.Neighbors) > 0 {
		l = 0
		for _, e := range m.Neighbors {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.MeasurementParams != nil {
		l = m.MeasurementParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Pci != 0 {
		n += 1 + sovTypes(uint64(m.Pci))
	}
	if m.Earfcn != 0 {
		n += 1 + sovTypes(uint64(m.Earfcn))
	}
	if m.CellType != 0 {
		n += 1 + sovTypes(uint64(m.CellType))
	}
	if len(m.Bwps) > 0 {
		for k, v := range m.Bwps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.RrcIdleCount != 0 {
		n += 1 + sovTypes(uint64(m.RrcIdleCount))
	}
	if m.RrcConnectedCount != 0 {
		n += 1 + sovTypes(uint64(m.RrcConnectedCount))
	}
	if m.Cached {
		n += 2
	}
	if len(m.CachedStates) > 0 {
		for k, v := range m.CachedStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.CurrentStateHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ResourceAllocScheme)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Grid != nil {
		l = m.Grid.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CellConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxPowerdB != 0 {
		n += 9
	}
	if m.Sector != nil {
		l = m.Sector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Beam != nil {
		l = m.Beam.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SsbFrequency != 0 {
		n += 1 + sovTypes(uint64(m.SsbFrequency))
	}
	if m.ArfcnDl != 0 {
		n += 1 + sovTypes(uint64(m.ArfcnDl))
	}
	if m.ArfcnUl != 0 {
		n += 1 + sovTypes(uint64(m.ArfcnUl))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BsChannelBwDl != 0 {
		n += 1 + sovTypes(uint64(m.BsChannelBwDl))
	}
	if m.BsChannelBwUl != 0 {
		n += 1 + sovTypes(uint64(m.BsChannelBwUl))
	}
	if m.BsChannelBwSul != 0 {
		n += 1 + sovTypes(uint64(m.BsChannelBwSul))
	}
	if m.Los {
		n += 2
	}
	return n
}

func (m *Beam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.H3DbAngle != 0 {
		n += 9
	}
	if m.V3DbAngle != 0 {
		n += 9
	}
	if m.MaxGain != 0 {
		n += 9
	}
	if m.MaxAttenuationDb != 0 {
		n += 9
	}
	if m.VSideLobeAttenuationDb != 0 {
		n += 9
	}
	return n
}

func (m *MeasurementParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeToTrigger != 0 {
		n += 1 + sovTypes(uint64(m.TimeToTrigger))
	}
	if m.FrequencyOffset != 0 {
		n += 1 + sovTypes(uint64(m.FrequencyOffset))
	}
	if m.PcellIndividualOffset != 0 {
		n += 1 + sovTypes(uint64(m.PcellIndividualOffset))
	}
	if len(m.NcellIndividualOffsets) > 0 {
		for k, v := range m.NcellIndividualOffsets {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.Hysteresis != 0 {
		n += 1 + sovTypes(uint64(m.Hysteresis))
	}
	if m.EventA3Params != nil {
		l = m.EventA3Params.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EventA3Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A3Offset != 0 {
		n += 1 + sovTypes(uint64(m.A3Offset))
	}
	if m.ReportOnLeave {
		n += 2
	}
	return n
}

func (m *Bwp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.Scs != 0 {
		n += 1 + sovTypes(uint64(m.Scs))
	}
	if m.NumberOfRbs != 0 {
		n += 1 + sovTypes(uint64(m.NumberOfRbs))
	}
	if m.Downlink {
		n += 2
	}
	return n
}

func (m *CellSignalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RpCoverageBoundaries) > 0 {
		for _, e := range m.RpCoverageBoundaries {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CoverageBoundaries) > 0 {
		for _, e := range m.CoverageBoundaries {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CoverageBoundary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefSignalStrength != 0 {
		n += 9
	}
	if len(m.BoundaryPoints) > 0 {
		for _, e := range m.BoundaryPoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Grid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShadowingMap) > 0 {
		n += 1 + sovTypes(uint64(len(m.ShadowingMap)*8)) + len(m.ShadowingMap)*8
	}
	if len(m.GridPoints) > 0 {
		for _, e := range m.GridPoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BoundingBox != nil {
		l = m.BoundingBox.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BoundingBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLat != 0 {
		n += 9
	}
	if m.MinLng != 0 {
		n += 9
	}
	if m.MaxLat != 0 {
		n += 9
	}
	if m.MaxLng != 0 {
		n += 9
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GnbID != 0 {
		n += 1 + sovTypes(uint64(m.GnbID))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ServiceModels) > 0 {
		for _, s := range m.ServiceModels {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CellNCGIs) > 0 {
		l = 0
		for _, e := range m.CellNCGIs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MapLayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Zoom != 0 {
		n += 5
	}
	if m.Fade {
		n += 2
	}
	if m.ShowRoutes {
		n += 2
	}
	if m.ShowPower {
		n += 2
	}
	if m.MinUes != 0 {
		n += 1 + sovTypes(uint64(m.MinUes))
	}
	if m.MaxUes != 0 {
		n += 1 + sovTypes(uint64(m.MaxUes))
	}
	if m.CurrentRoutes != 0 {
		n += 1 + sovTypes(uint64(m.CurrentRoutes))
	}
	if m.LocationsScale != 0 {
		n += 5
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Coordinate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coordinate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coordinate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Coordinate{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azimuth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Azimuth = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			m.Arc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tilt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tilt = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteID", wireType)
			}
			m.RouteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteID |= IMSI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waypoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waypoints = append(m.Waypoints, &Coordinate{})
			if err := m.Waypoints[len(m.Waypoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedAvg", wireType)
			}
			m.SpeedAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeedAvg |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedStdev", wireType)
			}
			m.SpeedStdev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeedStdev |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPoint", wireType)
			}
			m.NextPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMSI", wireType)
			}
			m.IMSI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMSI |= IMSI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ueid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ueid == nil {
				m.Ueid = &UeIdentity{}
			}
			if err := m.Ueid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrcState", wireType)
			}
			m.RrcState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrcState |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Coordinate{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heading", wireType)
			}
			m.Heading = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heading |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FiveQi", wireType)
			}
			m.FiveQi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FiveQi |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &UECell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRNTI", wireType)
			}
			m.CRNTI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRNTI |= CRNTI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &UECell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Height = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmitted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UECell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UECell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UECell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GnbID", wireType)
			}
			m.GnbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GnbID |= GnbID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ncgi", wireType)
			}
			m.Ncgi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ncgi |= NCGI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rsrp = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrq", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rsrq = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sinr", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sinr = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BwpRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BwpRefs = append(m.BwpRefs, &Bwp{})
			if err := m.BwpRefs[len(m.BwpRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailPrbsDl", wireType)
			}
			m.AvailPrbsDl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailPrbsDl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guami", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guami == nil {
				m.Guami = &Guami{}
			}
			if err := m.Guami.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmfUeNgapId", wireType)
			}
			m.AmfUeNgapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmfUeNgapId |= AmfUENgapID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Guami) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guami: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guami: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plmnid", wireType)
			}
			m.Plmnid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plmnid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmfRegionId", wireType)
			}
			m.AmfRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmfRegionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmfSetId", wireType)
			}
			m.AmfSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmfSetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmfPointer", wireType)
			}
			m.AmfPointer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmfPointer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoLatency", wireType)
			}
			m.HoLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoLatency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoReportTimestamp", wireType)
			}
			m.HoReportTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoReportTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirst = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellConfig == nil {
				m.CellConfig = &CellConfig{}
			}
			if err := m.CellConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NCGI", wireType)
			}
			m.NCGI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NCGI |= NCGI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUEs", wireType)
			}
			m.MaxUEs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUEs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v NCGI
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NCGI(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Neighbors = append(m.Neighbors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Neighbors) == 0 {
					m.Neighbors = make([]NCGI, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NCGI
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NCGI(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Neighbors = append(m.Neighbors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasurementParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeasurementParams == nil {
				m.MeasurementParams = &MeasurementParams{}
			}
			if err := m.MeasurementParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			m.Pci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pci |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earfcn", wireType)
			}
			m.Earfcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Earfcn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			m.CellType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellType |= CellType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bwps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bwps == nil {
				m.Bwps = make(map[uint64]*Bwp)
			}
			var mapkey uint64
			var mapvalue *Bwp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bwp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Bwps[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrcIdleCount", wireType)
			}
			m.RrcIdleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrcIdleCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrcConnectedCount", wireType)
			}
			m.RrcConnectedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrcConnectedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cached = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CachedStates == nil {
				m.CachedStates = make(map[string]*CellSignalInfo)
			}
			var mapkey string
			var mapvalue *CellSignalInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CellSignalInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CachedStates[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStateHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentStateHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceAllocScheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceAllocScheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grid == nil {
				m.Grid = &Grid{}
			}
			if err := m.Grid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerdB", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TxPowerdB = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sector == nil {
				m.Sector = &Sector{}
			}
			if err := m.Sector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Beam == nil {
				m.Beam = &Beam{}
			}
			if err := m.Beam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SsbFrequency", wireType)
			}
			m.SsbFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SsbFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArfcnDl", wireType)
			}
			m.ArfcnDl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArfcnDl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArfcnUl", wireType)
			}
			m.ArfcnUl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArfcnUl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsChannelBwDl", wireType)
			}
			m.BsChannelBwDl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsChannelBwDl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsChannelBwUl", wireType)
			}
			m.BsChannelBwUl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsChannelBwUl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsChannelBwSul", wireType)
			}
			m.BsChannelBwSul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsChannelBwSul |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Los", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Los = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Beam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Beam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Beam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field H3DbAngle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.H3DbAngle = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field V3DbAngle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.V3DbAngle = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGain", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxGain = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAttenuationDb", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxAttenuationDb = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VSideLobeAttenuationDb", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VSideLobeAttenuationDb = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeasurementParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeasurementParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeasurementParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToTrigger", wireType)
			}
			m.TimeToTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToTrigger |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyOffset", wireType)
			}
			m.FrequencyOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcellIndividualOffset", wireType)
			}
			m.PcellIndividualOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcellIndividualOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NcellIndividualOffsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NcellIndividualOffsets == nil {
				m.NcellIndividualOffsets = make(map[NCGI]int32)
			}
			var mapkey uint64
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NcellIndividualOffsets[NCGI(mapkey)] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hysteresis", wireType)
			}
			m.Hysteresis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hysteresis |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventA3Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventA3Params == nil {
				m.EventA3Params = &EventA3Params{}
			}
			if err := m.EventA3Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventA3Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventA3Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventA3Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A3Offset", wireType)
			}
			m.A3Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A3Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportOnLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportOnLeave = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bwp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bwp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bwp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scs", wireType)
			}
			m.Scs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRbs", wireType)
			}
			m.NumberOfRbs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRbs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Downlink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellSignalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellSignalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellSignalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpCoverageBoundaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpCoverageBoundaries = append(m.RpCoverageBoundaries, &CoverageBoundary{})
			if err := m.RpCoverageBoundaries[len(m.RpCoverageBoundaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverageBoundaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverageBoundaries = append(m.CoverageBoundaries, &CoverageBoundary{})
			if err := m.CoverageBoundaries[len(m.CoverageBoundaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoverageBoundary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoverageBoundary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoverageBoundary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefSignalStrength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RefSignalStrength = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundaryPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoundaryPoints = append(m.BoundaryPoints, &Coordinate{})
			if err := m.BoundaryPoints[len(m.BoundaryPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Grid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Grid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Grid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ShadowingMap = append(m.ShadowingMap, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ShadowingMap) == 0 {
					m.ShadowingMap = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ShadowingMap = append(m.ShadowingMap, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowingMap", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridPoints = append(m.GridPoints, &Coordinate{})
			if err := m.GridPoints[len(m.GridPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoundingBox == nil {
				m.BoundingBox = &BoundingBox{}
			}
			if err := m.BoundingBox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundingBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundingBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundingBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinLat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinLng = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxLat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxLng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GnbID", wireType)
			}
			m.GnbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GnbID |= GnbID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceModels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceModels = append(m.ServiceModels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v NCGI
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NCGI(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CellNCGIs = append(m.CellNCGIs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CellNCGIs) == 0 {
					m.CellNCGIs = make([]NCGI, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NCGI
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NCGI(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CellNCGIs = append(m.CellNCGIs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CellNCGIs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapLayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Coordinate{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Zoom = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fade = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRoutes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRoutes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPower = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUes", wireType)
			}
			m.MinUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUes", wireType)
			}
			m.MaxUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoutes", wireType)
			}
			m.CurrentRoutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRoutes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationsScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LocationsScale = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
